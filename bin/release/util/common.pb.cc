// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: util/common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "util/common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dsm {

namespace {

const ::google::protobuf::Descriptor* EmptyMessage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EmptyMessage_reflection_ = NULL;
const ::google::protobuf::Descriptor* Arg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Arg_reflection_ = NULL;
const ::google::protobuf::Descriptor* Args_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Args_reflection_ = NULL;
const ::google::protobuf::Descriptor* Record_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Record_reflection_ = NULL;
const ::google::protobuf::Descriptor* Records_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Records_reflection_ = NULL;
const ::google::protobuf::Descriptor* FileParams_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FileParams_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConfigData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConfigData_reflection_ = NULL;
const ::google::protobuf::Descriptor* TermcheckDelta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TermcheckDelta_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CompressionFormat_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_util_2fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_util_2fcommon_2eproto() {
  protobuf_AddDesc_util_2fcommon_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "util/common.proto");
  GOOGLE_CHECK(file != NULL);
  EmptyMessage_descriptor_ = file->message_type(0);
  static const int EmptyMessage_offsets_[1] = {
  };
  EmptyMessage_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EmptyMessage_descriptor_,
      EmptyMessage::default_instance_,
      EmptyMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _has_bits_[0]),
      -1,
      -1,
      sizeof(EmptyMessage),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmptyMessage, _internal_metadata_),
      -1);
  Arg_descriptor_ = file->message_type(1);
  static const int Arg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, value_),
  };
  Arg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Arg_descriptor_,
      Arg::default_instance_,
      Arg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _has_bits_[0]),
      -1,
      -1,
      sizeof(Arg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Arg, _internal_metadata_),
      -1);
  Args_descriptor_ = file->message_type(2);
  static const int Args_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, param_),
  };
  Args_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Args_descriptor_,
      Args::default_instance_,
      Args_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, _has_bits_[0]),
      -1,
      -1,
      sizeof(Args),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Args, _internal_metadata_),
      -1);
  Record_descriptor_ = file->message_type(3);
  static const int Record_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, value1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, value2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, value3_),
  };
  Record_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Record_descriptor_,
      Record::default_instance_,
      Record_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _has_bits_[0]),
      -1,
      -1,
      sizeof(Record),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Record, _internal_metadata_),
      -1);
  Records_descriptor_ = file->message_type(4);
  static const int Records_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, param_),
  };
  Records_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Records_descriptor_,
      Records::default_instance_,
      Records_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _has_bits_[0]),
      -1,
      -1,
      sizeof(Records),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Records, _internal_metadata_),
      -1);
  FileParams_descriptor_ = file->message_type(5);
  static const int FileParams_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, attr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, compression_),
  };
  FileParams_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      FileParams_descriptor_,
      FileParams::default_instance_,
      FileParams_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, _has_bits_[0]),
      -1,
      -1,
      sizeof(FileParams),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FileParams, _internal_metadata_),
      -1);
  ConfigData_descriptor_ = file->message_type(6);
  static const int ConfigData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, num_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, worker_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, master_id_),
  };
  ConfigData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ConfigData_descriptor_,
      ConfigData::default_instance_,
      ConfigData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _has_bits_[0]),
      -1,
      -1,
      sizeof(ConfigData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConfigData, _internal_metadata_),
      -1);
  TermcheckDelta_descriptor_ = file->message_type(7);
  static const int TermcheckDelta_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, updates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, diff_),
  };
  TermcheckDelta_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TermcheckDelta_descriptor_,
      TermcheckDelta::default_instance_,
      TermcheckDelta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, _has_bits_[0]),
      -1,
      -1,
      sizeof(TermcheckDelta),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TermcheckDelta, _internal_metadata_),
      -1);
  MessageTypes_descriptor_ = file->enum_type(0);
  CompressionFormat_descriptor_ = file->enum_type(1);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_util_2fcommon_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EmptyMessage_descriptor_, &EmptyMessage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Arg_descriptor_, &Arg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Args_descriptor_, &Args::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Record_descriptor_, &Record::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Records_descriptor_, &Records::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      FileParams_descriptor_, &FileParams::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ConfigData_descriptor_, &ConfigData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TermcheckDelta_descriptor_, &TermcheckDelta::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_util_2fcommon_2eproto() {
  delete EmptyMessage::default_instance_;
  delete EmptyMessage_reflection_;
  delete Arg::default_instance_;
  delete Arg_reflection_;
  delete Args::default_instance_;
  delete Args_reflection_;
  delete Record::default_instance_;
  delete Record_reflection_;
  delete Records::default_instance_;
  delete Records_reflection_;
  delete FileParams::default_instance_;
  delete FileParams_reflection_;
  delete ConfigData::default_instance_;
  delete ConfigData_reflection_;
  delete TermcheckDelta::default_instance_;
  delete TermcheckDelta_reflection_;
}

void protobuf_AddDesc_util_2fcommon_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_util_2fcommon_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021util/common.proto\022\003dsm\"\016\n\014EmptyMessage"
    "\"!\n\003Arg\022\013\n\003key\030\001 \002(\014\022\r\n\005value\030\002 \002(\014\"\037\n\004A"
    "rgs\022\027\n\005param\030\001 \003(\0132\010.dsm.Arg\"E\n\006Record\022\013"
    "\n\003key\030\001 \002(\014\022\016\n\006value1\030\002 \002(\014\022\016\n\006value2\030\003 "
    "\002(\014\022\016\n\006value3\030\004 \002(\014\"%\n\007Records\022\032\n\005param\030"
    "\001 \003(\0132\013.dsm.Record\"<\n\nFileParams\022\026\n\004attr"
    "\030\001 \003(\0132\010.dsm.Arg\022\026\n\013compression\030\002 \001(\005:\0010"
    "\"G\n\nConfigData\022\023\n\013num_workers\030\001 \002(\005\022\021\n\tw"
    "orker_id\030\002 \002(\005\022\021\n\tmaster_id\030\003 \002(\005\"M\n\016Ter"
    "mcheckDelta\022\r\n\005index\030\001 \002(\005\022\r\n\005value\030\002 \002("
    "\001\022\017\n\007updates\030\003 \002(\003\022\014\n\004diff\030\004 \002(\001*\337\004\n\014Mes"
    "sageTypes\022\024\n\020MTYPE_RUN_KERNEL\020\001\022\025\n\021MTYPE"
    "_KERNEL_DONE\020\002\022\025\n\021MTYPE_PUT_REQUEST\020\004\022\r\n"
    "\tMTYPE_GET\020\005\022\031\n\025MTYPE_WORKER_SHUTDOWN\020\010\022"
    "\031\n\025MTYPE_REGISTER_WORKER\020\t\022\032\n\026MTYPE_STAR"
    "T_CHECKPOINT\020\n\022\033\n\027MTYPE_FINISH_CHECKPOIN"
    "T\020\013\022\031\n\025MTYPE_CHECKPOINT_DONE\020\014\022\021\n\rMTYPE_"
    "RESTORE\020\r\022\026\n\022MTYPE_RESTORE_DONE\020\016\022\026\n\022MTY"
    "PE_WORKER_FLUSH\020\017\022\033\n\027MTYPE_WORKER_FLUSH_"
    "DONE\020\020\022\032\n\026MTYPE_SHARD_ASSIGNMENT\020\021\022\037\n\033MT"
    "YPE_SHARD_ASSIGNMENT_DONE\020\022\022\022\n\016MTYPE_ITE"
    "RATOR\020\024\022\030\n\024MTYPE_TERMCHECK_DONE\020\025\022\025\n\021MTY"
    "PE_TERMINATION\020\026\022\024\n\020MTYPE_SYNC_REPLY\020\037\022\026"
    "\n\022MTYPE_WORKER_APPLY\020!\022\033\n\027MTYPE_WORKER_A"
    "PPLY_DONE\020\"\022\024\n\020MTYPE_SWAP_TABLE\020#\022\025\n\021MTY"
    "PE_CLEAR_TABLE\020%\022\030\n\024MTYPE_ENABLE_TRIGGER"
    "\020&*0\n\021CompressionFormat\022\010\n\004NONE\020\000\022\007\n\003LZO"
    "\020\001\022\010\n\004ZLIB\020\002", 1092);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "util/common.proto", &protobuf_RegisterTypes);
  EmptyMessage::default_instance_ = new EmptyMessage();
  Arg::default_instance_ = new Arg();
  Args::default_instance_ = new Args();
  Record::default_instance_ = new Record();
  Records::default_instance_ = new Records();
  FileParams::default_instance_ = new FileParams();
  ConfigData::default_instance_ = new ConfigData();
  TermcheckDelta::default_instance_ = new TermcheckDelta();
  EmptyMessage::default_instance_->InitAsDefaultInstance();
  Arg::default_instance_->InitAsDefaultInstance();
  Args::default_instance_->InitAsDefaultInstance();
  Record::default_instance_->InitAsDefaultInstance();
  Records::default_instance_->InitAsDefaultInstance();
  FileParams::default_instance_->InitAsDefaultInstance();
  ConfigData::default_instance_->InitAsDefaultInstance();
  TermcheckDelta::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_util_2fcommon_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_util_2fcommon_2eproto {
  StaticDescriptorInitializer_util_2fcommon_2eproto() {
    protobuf_AddDesc_util_2fcommon_2eproto();
  }
} static_descriptor_initializer_util_2fcommon_2eproto_;
const ::google::protobuf::EnumDescriptor* MessageTypes_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MessageTypes_descriptor_;
}
bool MessageTypes_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 4:
    case 5:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 20:
    case 21:
    case 22:
    case 31:
    case 33:
    case 34:
    case 35:
    case 37:
    case 38:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CompressionFormat_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressionFormat_descriptor_;
}
bool CompressionFormat_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmptyMessage::EmptyMessage()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.EmptyMessage)
}

void EmptyMessage::InitAsDefaultInstance() {
}

EmptyMessage::EmptyMessage(const EmptyMessage& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.EmptyMessage)
}

void EmptyMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EmptyMessage::~EmptyMessage() {
  // @@protoc_insertion_point(destructor:dsm.EmptyMessage)
  SharedDtor();
}

void EmptyMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EmptyMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmptyMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EmptyMessage_descriptor_;
}

const EmptyMessage& EmptyMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

EmptyMessage* EmptyMessage::default_instance_ = NULL;

EmptyMessage* EmptyMessage::New(::google::protobuf::Arena* arena) const {
  EmptyMessage* n = new EmptyMessage;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmptyMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.EmptyMessage)
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EmptyMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.EmptyMessage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.EmptyMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.EmptyMessage)
  return false;
#undef DO_
}

void EmptyMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.EmptyMessage)
  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.EmptyMessage)
}

::google::protobuf::uint8* EmptyMessage::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.EmptyMessage)
  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.EmptyMessage)
  return target;
}

int EmptyMessage::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.EmptyMessage)
  int total_size = 0;

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmptyMessage::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.EmptyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EmptyMessage* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EmptyMessage>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.EmptyMessage)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.EmptyMessage)
    MergeFrom(*source);
  }
}

void EmptyMessage::MergeFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.EmptyMessage)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EmptyMessage::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmptyMessage::CopyFrom(const EmptyMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.EmptyMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmptyMessage::IsInitialized() const {

  return true;
}

void EmptyMessage::Swap(EmptyMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmptyMessage::InternalSwap(EmptyMessage* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmptyMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EmptyMessage_descriptor_;
  metadata.reflection = EmptyMessage_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmptyMessage

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Arg::kKeyFieldNumber;
const int Arg::kValueFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Arg::Arg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.Arg)
}

void Arg::InitAsDefaultInstance() {
}

Arg::Arg(const Arg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.Arg)
}

void Arg::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Arg::~Arg() {
  // @@protoc_insertion_point(destructor:dsm.Arg)
  SharedDtor();
}

void Arg::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Arg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Arg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Arg_descriptor_;
}

const Arg& Arg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

Arg* Arg::default_instance_ = NULL;

Arg* Arg::New(::google::protobuf::Arena* arena) const {
  Arg* n = new Arg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Arg::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.Arg)
  if (_has_bits_[0 / 32] & 3u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value()) {
      value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Arg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.Arg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required bytes value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.Arg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.Arg)
  return false;
#undef DO_
}

void Arg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.Arg)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.Arg)
}

::google::protobuf::uint8* Arg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.Arg)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value = 2;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.Arg)
  return target;
}

int Arg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.Arg)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value()) {
    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());
  }

  return total_size;
}
int Arg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.Arg)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Arg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.Arg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Arg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Arg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.Arg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.Arg)
    MergeFrom(*source);
  }
}

void Arg::MergeFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.Arg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value()) {
      set_has_value();
      value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Arg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Arg::CopyFrom(const Arg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.Arg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Arg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Arg::Swap(Arg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Arg::InternalSwap(Arg* other) {
  key_.Swap(&other->key_);
  value_.Swap(&other->value_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Arg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Arg_descriptor_;
  metadata.reflection = Arg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Arg

// required bytes key = 1;
bool Arg::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Arg::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Arg::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Arg::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Arg::key() const {
  // @@protoc_insertion_point(field_get:dsm.Arg.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Arg.key)
}
 void Arg::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Arg.key)
}
 void Arg::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Arg.key)
}
 ::std::string* Arg::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:dsm.Arg.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Arg::release_key() {
  // @@protoc_insertion_point(field_release:dsm.Arg.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dsm.Arg.key)
}

// required bytes value = 2;
bool Arg::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Arg::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void Arg::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void Arg::clear_value() {
  value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value();
}
 const ::std::string& Arg::value() const {
  // @@protoc_insertion_point(field_get:dsm.Arg.value)
  return value_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_value(const ::std::string& value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Arg.value)
}
 void Arg::set_value(const char* value) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Arg.value)
}
 void Arg::set_value(const void* value, size_t size) {
  set_has_value();
  value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Arg.value)
}
 ::std::string* Arg::mutable_value() {
  set_has_value();
  // @@protoc_insertion_point(field_mutable:dsm.Arg.value)
  return value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Arg::release_value() {
  // @@protoc_insertion_point(field_release:dsm.Arg.value)
  clear_has_value();
  return value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Arg::set_allocated_value(::std::string* value) {
  if (value != NULL) {
    set_has_value();
  } else {
    clear_has_value();
  }
  value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:dsm.Arg.value)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Args::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Args::Args()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.Args)
}

void Args::InitAsDefaultInstance() {
}

Args::Args(const Args& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.Args)
}

void Args::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Args::~Args() {
  // @@protoc_insertion_point(destructor:dsm.Args)
  SharedDtor();
}

void Args::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Args::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Args::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Args_descriptor_;
}

const Args& Args::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

Args* Args::default_instance_ = NULL;

Args* Args::New(::google::protobuf::Arena* arena) const {
  Args* n = new Args;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Args::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.Args)
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Args::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.Args)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dsm.Arg param = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.Args)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.Args)
  return false;
#undef DO_
}

void Args::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.Args)
  // repeated .dsm.Arg param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.Args)
}

::google::protobuf::uint8* Args::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.Args)
  // repeated .dsm.Arg param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->param(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.Args)
  return target;
}

int Args::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.Args)
  int total_size = 0;

  // repeated .dsm.Arg param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Args::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.Args)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Args* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Args>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.Args)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.Args)
    MergeFrom(*source);
  }
}

void Args::MergeFrom(const Args& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.Args)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  param_.MergeFrom(from.param_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Args::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Args::CopyFrom(const Args& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.Args)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Args::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Args::Swap(Args* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Args::InternalSwap(Args* other) {
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Args::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Args_descriptor_;
  metadata.reflection = Args_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Args

// repeated .dsm.Arg param = 1;
int Args::param_size() const {
  return param_.size();
}
void Args::clear_param() {
  param_.Clear();
}
const ::dsm::Arg& Args::param(int index) const {
  // @@protoc_insertion_point(field_get:dsm.Args.param)
  return param_.Get(index);
}
::dsm::Arg* Args::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.Args.param)
  return param_.Mutable(index);
}
::dsm::Arg* Args::add_param() {
  // @@protoc_insertion_point(field_add:dsm.Args.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::Arg >*
Args::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:dsm.Args.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::Arg >&
Args::param() const {
  // @@protoc_insertion_point(field_list:dsm.Args.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Record::kKeyFieldNumber;
const int Record::kValue1FieldNumber;
const int Record::kValue2FieldNumber;
const int Record::kValue3FieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Record::Record()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.Record)
}

void Record::InitAsDefaultInstance() {
}

Record::Record(const Record& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.Record)
}

void Record::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value3_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Record::~Record() {
  // @@protoc_insertion_point(destructor:dsm.Record)
  SharedDtor();
}

void Record::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value1_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value2_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  value3_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Record::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Record::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Record_descriptor_;
}

const Record& Record::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

Record* Record::default_instance_ = NULL;

Record* Record::New(::google::protobuf::Arena* arena) const {
  Record* n = new Record;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Record::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.Record)
  if (_has_bits_[0 / 32] & 15u) {
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value1()) {
      value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value2()) {
      value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_value3()) {
      value3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Record::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.Record)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value1;
        break;
      }

      // required bytes value1 = 2;
      case 2: {
        if (tag == 18) {
         parse_value1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value1()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_value2;
        break;
      }

      // required bytes value2 = 3;
      case 3: {
        if (tag == 26) {
         parse_value2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value2()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value3;
        break;
      }

      // required bytes value3 = 4;
      case 4: {
        if (tag == 34) {
         parse_value3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value3()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.Record)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.Record)
  return false;
#undef DO_
}

void Record::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.Record)
  // required bytes key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->key(), output);
  }

  // required bytes value1 = 2;
  if (has_value1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->value1(), output);
  }

  // required bytes value2 = 3;
  if (has_value2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->value2(), output);
  }

  // required bytes value3 = 4;
  if (has_value3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->value3(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.Record)
}

::google::protobuf::uint8* Record::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.Record)
  // required bytes key = 1;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->key(), target);
  }

  // required bytes value1 = 2;
  if (has_value1()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->value1(), target);
  }

  // required bytes value2 = 3;
  if (has_value2()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->value2(), target);
  }

  // required bytes value3 = 4;
  if (has_value3()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->value3(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.Record)
  return target;
}

int Record::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.Record)
  int total_size = 0;

  if (has_key()) {
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  if (has_value1()) {
    // required bytes value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value1());
  }

  if (has_value2()) {
    // required bytes value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value2());
  }

  if (has_value3()) {
    // required bytes value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value3());
  }

  return total_size;
}
int Record::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.Record)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required bytes key = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());

    // required bytes value1 = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value1());

    // required bytes value2 = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value2());

    // required bytes value3 = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->value3());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Record::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Record* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Record>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.Record)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.Record)
    MergeFrom(*source);
  }
}

void Record::MergeFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.Record)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_value1()) {
      set_has_value1();
      value1_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value1_);
    }
    if (from.has_value2()) {
      set_has_value2();
      value2_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value2_);
    }
    if (from.has_value3()) {
      set_has_value3();
      value3_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.value3_);
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Record::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Record::CopyFrom(const Record& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.Record)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Record::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Record::Swap(Record* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Record::InternalSwap(Record* other) {
  key_.Swap(&other->key_);
  value1_.Swap(&other->value1_);
  value2_.Swap(&other->value2_);
  value3_.Swap(&other->value3_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Record::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Record_descriptor_;
  metadata.reflection = Record_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Record

// required bytes key = 1;
bool Record::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Record::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
void Record::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
void Record::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& Record::key() const {
  // @@protoc_insertion_point(field_get:dsm.Record.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Record.key)
}
 void Record::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Record.key)
}
 void Record::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Record.key)
}
 ::std::string* Record::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:dsm.Record.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_key() {
  // @@protoc_insertion_point(field_release:dsm.Record.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dsm.Record.key)
}

// required bytes value1 = 2;
bool Record::has_value1() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Record::set_has_value1() {
  _has_bits_[0] |= 0x00000002u;
}
void Record::clear_has_value1() {
  _has_bits_[0] &= ~0x00000002u;
}
void Record::clear_value1() {
  value1_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value1();
}
 const ::std::string& Record::value1() const {
  // @@protoc_insertion_point(field_get:dsm.Record.value1)
  return value1_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value1(const ::std::string& value) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Record.value1)
}
 void Record::set_value1(const char* value) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Record.value1)
}
 void Record::set_value1(const void* value, size_t size) {
  set_has_value1();
  value1_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Record.value1)
}
 ::std::string* Record::mutable_value1() {
  set_has_value1();
  // @@protoc_insertion_point(field_mutable:dsm.Record.value1)
  return value1_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value1() {
  // @@protoc_insertion_point(field_release:dsm.Record.value1)
  clear_has_value1();
  return value1_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value1(::std::string* value1) {
  if (value1 != NULL) {
    set_has_value1();
  } else {
    clear_has_value1();
  }
  value1_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value1);
  // @@protoc_insertion_point(field_set_allocated:dsm.Record.value1)
}

// required bytes value2 = 3;
bool Record::has_value2() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Record::set_has_value2() {
  _has_bits_[0] |= 0x00000004u;
}
void Record::clear_has_value2() {
  _has_bits_[0] &= ~0x00000004u;
}
void Record::clear_value2() {
  value2_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value2();
}
 const ::std::string& Record::value2() const {
  // @@protoc_insertion_point(field_get:dsm.Record.value2)
  return value2_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value2(const ::std::string& value) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Record.value2)
}
 void Record::set_value2(const char* value) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Record.value2)
}
 void Record::set_value2(const void* value, size_t size) {
  set_has_value2();
  value2_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Record.value2)
}
 ::std::string* Record::mutable_value2() {
  set_has_value2();
  // @@protoc_insertion_point(field_mutable:dsm.Record.value2)
  return value2_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value2() {
  // @@protoc_insertion_point(field_release:dsm.Record.value2)
  clear_has_value2();
  return value2_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value2(::std::string* value2) {
  if (value2 != NULL) {
    set_has_value2();
  } else {
    clear_has_value2();
  }
  value2_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value2);
  // @@protoc_insertion_point(field_set_allocated:dsm.Record.value2)
}

// required bytes value3 = 4;
bool Record::has_value3() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void Record::set_has_value3() {
  _has_bits_[0] |= 0x00000008u;
}
void Record::clear_has_value3() {
  _has_bits_[0] &= ~0x00000008u;
}
void Record::clear_value3() {
  value3_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_value3();
}
 const ::std::string& Record::value3() const {
  // @@protoc_insertion_point(field_get:dsm.Record.value3)
  return value3_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_value3(const ::std::string& value) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.Record.value3)
}
 void Record::set_value3(const char* value) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.Record.value3)
}
 void Record::set_value3(const void* value, size_t size) {
  set_has_value3();
  value3_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.Record.value3)
}
 ::std::string* Record::mutable_value3() {
  set_has_value3();
  // @@protoc_insertion_point(field_mutable:dsm.Record.value3)
  return value3_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Record::release_value3() {
  // @@protoc_insertion_point(field_release:dsm.Record.value3)
  clear_has_value3();
  return value3_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Record::set_allocated_value3(::std::string* value3) {
  if (value3 != NULL) {
    set_has_value3();
  } else {
    clear_has_value3();
  }
  value3_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value3);
  // @@protoc_insertion_point(field_set_allocated:dsm.Record.value3)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Records::kParamFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Records::Records()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.Records)
}

void Records::InitAsDefaultInstance() {
}

Records::Records(const Records& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.Records)
}

void Records::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Records::~Records() {
  // @@protoc_insertion_point(destructor:dsm.Records)
  SharedDtor();
}

void Records::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Records::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Records::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Records_descriptor_;
}

const Records& Records::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

Records* Records::default_instance_ = NULL;

Records* Records::New(::google::protobuf::Arena* arena) const {
  Records* n = new Records;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Records::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.Records)
  param_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Records::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.Records)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dsm.Record param = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_param:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_param()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_param;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.Records)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.Records)
  return false;
#undef DO_
}

void Records::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.Records)
  // repeated .dsm.Record param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->param(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.Records)
}

::google::protobuf::uint8* Records::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.Records)
  // repeated .dsm.Record param = 1;
  for (unsigned int i = 0, n = this->param_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->param(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.Records)
  return target;
}

int Records::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.Records)
  int total_size = 0;

  // repeated .dsm.Record param = 1;
  total_size += 1 * this->param_size();
  for (int i = 0; i < this->param_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->param(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Records::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.Records)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Records* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Records>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.Records)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.Records)
    MergeFrom(*source);
  }
}

void Records::MergeFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.Records)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  param_.MergeFrom(from.param_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Records::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Records::CopyFrom(const Records& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.Records)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Records::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->param())) return false;
  return true;
}

void Records::Swap(Records* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Records::InternalSwap(Records* other) {
  param_.UnsafeArenaSwap(&other->param_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Records::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Records_descriptor_;
  metadata.reflection = Records_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Records

// repeated .dsm.Record param = 1;
int Records::param_size() const {
  return param_.size();
}
void Records::clear_param() {
  param_.Clear();
}
const ::dsm::Record& Records::param(int index) const {
  // @@protoc_insertion_point(field_get:dsm.Records.param)
  return param_.Get(index);
}
::dsm::Record* Records::mutable_param(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.Records.param)
  return param_.Mutable(index);
}
::dsm::Record* Records::add_param() {
  // @@protoc_insertion_point(field_add:dsm.Records.param)
  return param_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::Record >*
Records::mutable_param() {
  // @@protoc_insertion_point(field_mutable_list:dsm.Records.param)
  return &param_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::Record >&
Records::param() const {
  // @@protoc_insertion_point(field_list:dsm.Records.param)
  return param_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileParams::kAttrFieldNumber;
const int FileParams::kCompressionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileParams::FileParams()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.FileParams)
}

void FileParams::InitAsDefaultInstance() {
}

FileParams::FileParams(const FileParams& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.FileParams)
}

void FileParams::SharedCtor() {
  _cached_size_ = 0;
  compression_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FileParams::~FileParams() {
  // @@protoc_insertion_point(destructor:dsm.FileParams)
  SharedDtor();
}

void FileParams::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FileParams::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FileParams::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FileParams_descriptor_;
}

const FileParams& FileParams::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

FileParams* FileParams::default_instance_ = NULL;

FileParams* FileParams::New(::google::protobuf::Arena* arena) const {
  FileParams* n = new FileParams;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileParams::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.FileParams)
  compression_ = 0;
  attr_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool FileParams::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.FileParams)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dsm.Arg attr = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_attr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_attr()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_attr;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(16)) goto parse_compression;
        break;
      }

      // optional int32 compression = 2 [default = 0];
      case 2: {
        if (tag == 16) {
         parse_compression:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &compression_)));
          set_has_compression();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.FileParams)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.FileParams)
  return false;
#undef DO_
}

void FileParams::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.FileParams)
  // repeated .dsm.Arg attr = 1;
  for (unsigned int i = 0, n = this->attr_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->attr(i), output);
  }

  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->compression(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.FileParams)
}

::google::protobuf::uint8* FileParams::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.FileParams)
  // repeated .dsm.Arg attr = 1;
  for (unsigned int i = 0, n = this->attr_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->attr(i), false, target);
  }

  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->compression(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.FileParams)
  return target;
}

int FileParams::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.FileParams)
  int total_size = 0;

  // optional int32 compression = 2 [default = 0];
  if (has_compression()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->compression());
  }

  // repeated .dsm.Arg attr = 1;
  total_size += 1 * this->attr_size();
  for (int i = 0; i < this->attr_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->attr(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileParams::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.FileParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const FileParams* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const FileParams>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.FileParams)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.FileParams)
    MergeFrom(*source);
  }
}

void FileParams::MergeFrom(const FileParams& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.FileParams)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  attr_.MergeFrom(from.attr_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_compression()) {
      set_compression(from.compression());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void FileParams::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.FileParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FileParams::CopyFrom(const FileParams& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.FileParams)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileParams::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->attr())) return false;
  return true;
}

void FileParams::Swap(FileParams* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileParams::InternalSwap(FileParams* other) {
  attr_.UnsafeArenaSwap(&other->attr_);
  std::swap(compression_, other->compression_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FileParams::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FileParams_descriptor_;
  metadata.reflection = FileParams_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileParams

// repeated .dsm.Arg attr = 1;
int FileParams::attr_size() const {
  return attr_.size();
}
void FileParams::clear_attr() {
  attr_.Clear();
}
const ::dsm::Arg& FileParams::attr(int index) const {
  // @@protoc_insertion_point(field_get:dsm.FileParams.attr)
  return attr_.Get(index);
}
::dsm::Arg* FileParams::mutable_attr(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.FileParams.attr)
  return attr_.Mutable(index);
}
::dsm::Arg* FileParams::add_attr() {
  // @@protoc_insertion_point(field_add:dsm.FileParams.attr)
  return attr_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::Arg >*
FileParams::mutable_attr() {
  // @@protoc_insertion_point(field_mutable_list:dsm.FileParams.attr)
  return &attr_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::Arg >&
FileParams::attr() const {
  // @@protoc_insertion_point(field_list:dsm.FileParams.attr)
  return attr_;
}

// optional int32 compression = 2 [default = 0];
bool FileParams::has_compression() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void FileParams::set_has_compression() {
  _has_bits_[0] |= 0x00000002u;
}
void FileParams::clear_has_compression() {
  _has_bits_[0] &= ~0x00000002u;
}
void FileParams::clear_compression() {
  compression_ = 0;
  clear_has_compression();
}
 ::google::protobuf::int32 FileParams::compression() const {
  // @@protoc_insertion_point(field_get:dsm.FileParams.compression)
  return compression_;
}
 void FileParams::set_compression(::google::protobuf::int32 value) {
  set_has_compression();
  compression_ = value;
  // @@protoc_insertion_point(field_set:dsm.FileParams.compression)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConfigData::kNumWorkersFieldNumber;
const int ConfigData::kWorkerIdFieldNumber;
const int ConfigData::kMasterIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConfigData::ConfigData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.ConfigData)
}

void ConfigData::InitAsDefaultInstance() {
}

ConfigData::ConfigData(const ConfigData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.ConfigData)
}

void ConfigData::SharedCtor() {
  _cached_size_ = 0;
  num_workers_ = 0;
  worker_id_ = 0;
  master_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConfigData::~ConfigData() {
  // @@protoc_insertion_point(destructor:dsm.ConfigData)
  SharedDtor();
}

void ConfigData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ConfigData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConfigData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConfigData_descriptor_;
}

const ConfigData& ConfigData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

ConfigData* ConfigData::default_instance_ = NULL;

ConfigData* ConfigData::New(::google::protobuf::Arena* arena) const {
  ConfigData* n = new ConfigData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConfigData::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.ConfigData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ConfigData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ConfigData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(num_workers_, master_id_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ConfigData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.ConfigData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 num_workers = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
          set_has_num_workers();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_worker_id;
        break;
      }

      // required int32 worker_id = 2;
      case 2: {
        if (tag == 16) {
         parse_worker_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &worker_id_)));
          set_has_worker_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_master_id;
        break;
      }

      // required int32 master_id = 3;
      case 3: {
        if (tag == 24) {
         parse_master_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &master_id_)));
          set_has_master_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.ConfigData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.ConfigData)
  return false;
#undef DO_
}

void ConfigData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.ConfigData)
  // required int32 num_workers = 1;
  if (has_num_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num_workers(), output);
  }

  // required int32 worker_id = 2;
  if (has_worker_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->worker_id(), output);
  }

  // required int32 master_id = 3;
  if (has_master_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->master_id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.ConfigData)
}

::google::protobuf::uint8* ConfigData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.ConfigData)
  // required int32 num_workers = 1;
  if (has_num_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num_workers(), target);
  }

  // required int32 worker_id = 2;
  if (has_worker_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->worker_id(), target);
  }

  // required int32 master_id = 3;
  if (has_master_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->master_id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.ConfigData)
  return target;
}

int ConfigData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.ConfigData)
  int total_size = 0;

  if (has_num_workers()) {
    // required int32 num_workers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_workers());
  }

  if (has_worker_id()) {
    // required int32 worker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_id());
  }

  if (has_master_id()) {
    // required int32 master_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->master_id());
  }

  return total_size;
}
int ConfigData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.ConfigData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 num_workers = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->num_workers());

    // required int32 worker_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->worker_id());

    // required int32 master_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->master_id());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConfigData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.ConfigData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ConfigData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ConfigData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.ConfigData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.ConfigData)
    MergeFrom(*source);
  }
}

void ConfigData::MergeFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.ConfigData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num_workers()) {
      set_num_workers(from.num_workers());
    }
    if (from.has_worker_id()) {
      set_worker_id(from.worker_id());
    }
    if (from.has_master_id()) {
      set_master_id(from.master_id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ConfigData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConfigData::CopyFrom(const ConfigData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.ConfigData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConfigData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ConfigData::Swap(ConfigData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConfigData::InternalSwap(ConfigData* other) {
  std::swap(num_workers_, other->num_workers_);
  std::swap(worker_id_, other->worker_id_);
  std::swap(master_id_, other->master_id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ConfigData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConfigData_descriptor_;
  metadata.reflection = ConfigData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConfigData

// required int32 num_workers = 1;
bool ConfigData::has_num_workers() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ConfigData::set_has_num_workers() {
  _has_bits_[0] |= 0x00000001u;
}
void ConfigData::clear_has_num_workers() {
  _has_bits_[0] &= ~0x00000001u;
}
void ConfigData::clear_num_workers() {
  num_workers_ = 0;
  clear_has_num_workers();
}
 ::google::protobuf::int32 ConfigData::num_workers() const {
  // @@protoc_insertion_point(field_get:dsm.ConfigData.num_workers)
  return num_workers_;
}
 void ConfigData::set_num_workers(::google::protobuf::int32 value) {
  set_has_num_workers();
  num_workers_ = value;
  // @@protoc_insertion_point(field_set:dsm.ConfigData.num_workers)
}

// required int32 worker_id = 2;
bool ConfigData::has_worker_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ConfigData::set_has_worker_id() {
  _has_bits_[0] |= 0x00000002u;
}
void ConfigData::clear_has_worker_id() {
  _has_bits_[0] &= ~0x00000002u;
}
void ConfigData::clear_worker_id() {
  worker_id_ = 0;
  clear_has_worker_id();
}
 ::google::protobuf::int32 ConfigData::worker_id() const {
  // @@protoc_insertion_point(field_get:dsm.ConfigData.worker_id)
  return worker_id_;
}
 void ConfigData::set_worker_id(::google::protobuf::int32 value) {
  set_has_worker_id();
  worker_id_ = value;
  // @@protoc_insertion_point(field_set:dsm.ConfigData.worker_id)
}

// required int32 master_id = 3;
bool ConfigData::has_master_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ConfigData::set_has_master_id() {
  _has_bits_[0] |= 0x00000004u;
}
void ConfigData::clear_has_master_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void ConfigData::clear_master_id() {
  master_id_ = 0;
  clear_has_master_id();
}
 ::google::protobuf::int32 ConfigData::master_id() const {
  // @@protoc_insertion_point(field_get:dsm.ConfigData.master_id)
  return master_id_;
}
 void ConfigData::set_master_id(::google::protobuf::int32 value) {
  set_has_master_id();
  master_id_ = value;
  // @@protoc_insertion_point(field_set:dsm.ConfigData.master_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TermcheckDelta::kIndexFieldNumber;
const int TermcheckDelta::kValueFieldNumber;
const int TermcheckDelta::kUpdatesFieldNumber;
const int TermcheckDelta::kDiffFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TermcheckDelta::TermcheckDelta()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.TermcheckDelta)
}

void TermcheckDelta::InitAsDefaultInstance() {
}

TermcheckDelta::TermcheckDelta(const TermcheckDelta& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.TermcheckDelta)
}

void TermcheckDelta::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = 0;
  updates_ = GOOGLE_LONGLONG(0);
  diff_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TermcheckDelta::~TermcheckDelta() {
  // @@protoc_insertion_point(destructor:dsm.TermcheckDelta)
  SharedDtor();
}

void TermcheckDelta::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TermcheckDelta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TermcheckDelta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TermcheckDelta_descriptor_;
}

const TermcheckDelta& TermcheckDelta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_util_2fcommon_2eproto();
  return *default_instance_;
}

TermcheckDelta* TermcheckDelta::default_instance_ = NULL;

TermcheckDelta* TermcheckDelta::New(::google::protobuf::Arena* arena) const {
  TermcheckDelta* n = new TermcheckDelta;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TermcheckDelta::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.TermcheckDelta)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TermcheckDelta, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TermcheckDelta*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(value_, index_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TermcheckDelta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.TermcheckDelta)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_value;
        break;
      }

      // required double value = 2;
      case 2: {
        if (tag == 17) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_updates;
        break;
      }

      // required int64 updates = 3;
      case 3: {
        if (tag == 24) {
         parse_updates:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updates_)));
          set_has_updates();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_diff;
        break;
      }

      // required double diff = 4;
      case 4: {
        if (tag == 33) {
         parse_diff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &diff_)));
          set_has_diff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.TermcheckDelta)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.TermcheckDelta)
  return false;
#undef DO_
}

void TermcheckDelta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.TermcheckDelta)
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // required double value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->value(), output);
  }

  // required int64 updates = 3;
  if (has_updates()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->updates(), output);
  }

  // required double diff = 4;
  if (has_diff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->diff(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.TermcheckDelta)
}

::google::protobuf::uint8* TermcheckDelta::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.TermcheckDelta)
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // required double value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->value(), target);
  }

  // required int64 updates = 3;
  if (has_updates()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->updates(), target);
  }

  // required double diff = 4;
  if (has_diff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->diff(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.TermcheckDelta)
  return target;
}

int TermcheckDelta::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.TermcheckDelta)
  int total_size = 0;

  if (has_index()) {
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());
  }

  if (has_value()) {
    // required double value = 2;
    total_size += 1 + 8;
  }

  if (has_updates()) {
    // required int64 updates = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updates());
  }

  if (has_diff()) {
    // required double diff = 4;
    total_size += 1 + 8;
  }

  return total_size;
}
int TermcheckDelta::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.TermcheckDelta)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required int32 index = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->index());

    // required double value = 2;
    total_size += 1 + 8;

    // required int64 updates = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->updates());

    // required double diff = 4;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TermcheckDelta::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.TermcheckDelta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TermcheckDelta* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TermcheckDelta>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.TermcheckDelta)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.TermcheckDelta)
    MergeFrom(*source);
  }
}

void TermcheckDelta::MergeFrom(const TermcheckDelta& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.TermcheckDelta)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_updates()) {
      set_updates(from.updates());
    }
    if (from.has_diff()) {
      set_diff(from.diff());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TermcheckDelta::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.TermcheckDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TermcheckDelta::CopyFrom(const TermcheckDelta& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.TermcheckDelta)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TermcheckDelta::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void TermcheckDelta::Swap(TermcheckDelta* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TermcheckDelta::InternalSwap(TermcheckDelta* other) {
  std::swap(index_, other->index_);
  std::swap(value_, other->value_);
  std::swap(updates_, other->updates_);
  std::swap(diff_, other->diff_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TermcheckDelta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TermcheckDelta_descriptor_;
  metadata.reflection = TermcheckDelta_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TermcheckDelta

// required int32 index = 1;
bool TermcheckDelta::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TermcheckDelta::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
void TermcheckDelta::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
void TermcheckDelta::clear_index() {
  index_ = 0;
  clear_has_index();
}
 ::google::protobuf::int32 TermcheckDelta::index() const {
  // @@protoc_insertion_point(field_get:dsm.TermcheckDelta.index)
  return index_;
}
 void TermcheckDelta::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:dsm.TermcheckDelta.index)
}

// required double value = 2;
bool TermcheckDelta::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TermcheckDelta::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
void TermcheckDelta::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
void TermcheckDelta::clear_value() {
  value_ = 0;
  clear_has_value();
}
 double TermcheckDelta::value() const {
  // @@protoc_insertion_point(field_get:dsm.TermcheckDelta.value)
  return value_;
}
 void TermcheckDelta::set_value(double value) {
  set_has_value();
  value_ = value;
  // @@protoc_insertion_point(field_set:dsm.TermcheckDelta.value)
}

// required int64 updates = 3;
bool TermcheckDelta::has_updates() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TermcheckDelta::set_has_updates() {
  _has_bits_[0] |= 0x00000004u;
}
void TermcheckDelta::clear_has_updates() {
  _has_bits_[0] &= ~0x00000004u;
}
void TermcheckDelta::clear_updates() {
  updates_ = GOOGLE_LONGLONG(0);
  clear_has_updates();
}
 ::google::protobuf::int64 TermcheckDelta::updates() const {
  // @@protoc_insertion_point(field_get:dsm.TermcheckDelta.updates)
  return updates_;
}
 void TermcheckDelta::set_updates(::google::protobuf::int64 value) {
  set_has_updates();
  updates_ = value;
  // @@protoc_insertion_point(field_set:dsm.TermcheckDelta.updates)
}

// required double diff = 4;
bool TermcheckDelta::has_diff() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TermcheckDelta::set_has_diff() {
  _has_bits_[0] |= 0x00000008u;
}
void TermcheckDelta::clear_has_diff() {
  _has_bits_[0] &= ~0x00000008u;
}
void TermcheckDelta::clear_diff() {
  diff_ = 0;
  clear_has_diff();
}
 double TermcheckDelta::diff() const {
  // @@protoc_insertion_point(field_get:dsm.TermcheckDelta.diff)
  return diff_;
}
 void TermcheckDelta::set_diff(double value) {
  set_has_diff();
  diff_ = value;
  // @@protoc_insertion_point(field_set:dsm.TermcheckDelta.diff)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dsm

// @@protoc_insertion_point(global_scope)
