// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: worker/worker.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "worker/worker.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace dsm {

namespace {

const ::google::protobuf::Descriptor* RegisterWorkerRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RegisterWorkerRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignment_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardAssignmentRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardAssignmentRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ShardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MethodStats_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MethodStats_reflection_ = NULL;
const ::google::protobuf::Descriptor* KernelRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KernelRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* KernelDone_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KernelDone_reflection_ = NULL;
const ::google::protobuf::Descriptor* IteratorRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IteratorRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* IteratorResponse_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IteratorResponse_reflection_ = NULL;
const ::google::protobuf::Descriptor* HashGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HashGet_reflection_ = NULL;
const ::google::protobuf::Descriptor* TableData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TableData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KVPairData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KVPairData_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckpointRequest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckpointRequest_reflection_ = NULL;
const ::google::protobuf::Descriptor* TerminationNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TerminationNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartRestore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartRestore_reflection_ = NULL;
const ::google::protobuf::Descriptor* CheckpointInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CheckpointInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SwapTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SwapTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClearTable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClearTable_reflection_ = NULL;
const ::google::protobuf::Descriptor* EnableTrigger_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EnableTrigger_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CheckpointType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_worker_2fworker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_worker_2fworker_2eproto() {
  protobuf_AddDesc_worker_2fworker_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "worker/worker.proto");
  GOOGLE_CHECK(file != NULL);
  RegisterWorkerRequest_descriptor_ = file->message_type(0);
  static const int RegisterWorkerRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, id_),
  };
  RegisterWorkerRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RegisterWorkerRequest_descriptor_,
      RegisterWorkerRequest::default_instance_,
      RegisterWorkerRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(RegisterWorkerRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RegisterWorkerRequest, _internal_metadata_),
      -1);
  ShardAssignment_descriptor_ = file->message_type(1);
  static const int ShardAssignment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, new_worker_),
  };
  ShardAssignment_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShardAssignment_descriptor_,
      ShardAssignment::default_instance_,
      ShardAssignment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShardAssignment),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignment, _internal_metadata_),
      -1);
  ShardAssignmentRequest_descriptor_ = file->message_type(2);
  static const int ShardAssignmentRequest_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, assign_),
  };
  ShardAssignmentRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShardAssignmentRequest_descriptor_,
      ShardAssignmentRequest::default_instance_,
      ShardAssignmentRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShardAssignmentRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardAssignmentRequest, _internal_metadata_),
      -1);
  ShardInfo_descriptor_ = file->message_type(3);
  static const int ShardInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, entries_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, owner_),
  };
  ShardInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ShardInfo_descriptor_,
      ShardInfo::default_instance_,
      ShardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(ShardInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShardInfo, _internal_metadata_),
      -1);
  MethodStats_descriptor_ = file->message_type(4);
  static const int MethodStats_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, total_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, calls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, shard_calls_),
  };
  MethodStats_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MethodStats_descriptor_,
      MethodStats::default_instance_,
      MethodStats_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _has_bits_[0]),
      -1,
      -1,
      sizeof(MethodStats),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MethodStats, _internal_metadata_),
      -1);
  KernelRequest_descriptor_ = file->message_type(5);
  static const int KernelRequest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, kernel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, method_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, args_),
  };
  KernelRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KernelRequest_descriptor_,
      KernelRequest::default_instance_,
      KernelRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(KernelRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelRequest, _internal_metadata_),
      -1);
  KernelDone_descriptor_ = file->message_type(6);
  static const int KernelDone_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelDone, kernel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelDone, shards_),
  };
  KernelDone_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KernelDone_descriptor_,
      KernelDone::default_instance_,
      KernelDone_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelDone, _has_bits_[0]),
      -1,
      -1,
      sizeof(KernelDone),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KernelDone, _internal_metadata_),
      -1);
  IteratorRequest_descriptor_ = file->message_type(7);
  static const int IteratorRequest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, row_count_),
  };
  IteratorRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IteratorRequest_descriptor_,
      IteratorRequest::default_instance_,
      IteratorRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(IteratorRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorRequest, _internal_metadata_),
      -1);
  IteratorResponse_descriptor_ = file->message_type(8);
  static const int IteratorResponse_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, row_count_),
  };
  IteratorResponse_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      IteratorResponse_descriptor_,
      IteratorResponse::default_instance_,
      IteratorResponse_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, _has_bits_[0]),
      -1,
      -1,
      sizeof(IteratorResponse),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IteratorResponse, _internal_metadata_),
      -1);
  HashGet_descriptor_ = file->message_type(9);
  static const int HashGet_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, index_),
  };
  HashGet_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      HashGet_descriptor_,
      HashGet::default_instance_,
      HashGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, _has_bits_[0]),
      -1,
      -1,
      sizeof(HashGet),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HashGet, _internal_metadata_),
      -1);
  TableData_descriptor_ = file->message_type(10);
  static const int TableData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, table_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, rec_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, missing_key_),
  };
  TableData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TableData_descriptor_,
      TableData::default_instance_,
      TableData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _has_bits_[0]),
      -1,
      -1,
      sizeof(TableData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TableData, _internal_metadata_),
      -1);
  KVPairData_descriptor_ = file->message_type(11);
  static const int KVPairData_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, shard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, done_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, table_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, kv_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, marker_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, missing_key_),
  };
  KVPairData_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      KVPairData_descriptor_,
      KVPairData::default_instance_,
      KVPairData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, _has_bits_[0]),
      -1,
      -1,
      sizeof(KVPairData),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KVPairData, _internal_metadata_),
      -1);
  CheckpointRequest_descriptor_ = file->message_type(12);
  static const int CheckpointRequest_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointRequest, epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointRequest, checkpoint_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointRequest, table_),
  };
  CheckpointRequest_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckpointRequest_descriptor_,
      CheckpointRequest::default_instance_,
      CheckpointRequest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointRequest, _has_bits_[0]),
      -1,
      -1,
      sizeof(CheckpointRequest),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointRequest, _internal_metadata_),
      -1);
  TerminationNotification_descriptor_ = file->message_type(13);
  static const int TerminationNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminationNotification, epoch_),
  };
  TerminationNotification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TerminationNotification_descriptor_,
      TerminationNotification::default_instance_,
      TerminationNotification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminationNotification, _has_bits_[0]),
      -1,
      -1,
      sizeof(TerminationNotification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TerminationNotification, _internal_metadata_),
      -1);
  StartRestore_descriptor_ = file->message_type(14);
  static const int StartRestore_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRestore, epoch_),
  };
  StartRestore_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      StartRestore_descriptor_,
      StartRestore::default_instance_,
      StartRestore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRestore, _has_bits_[0]),
      -1,
      -1,
      sizeof(StartRestore),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartRestore, _internal_metadata_),
      -1);
  CheckpointInfo_descriptor_ = file->message_type(15);
  static const int CheckpointInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointInfo, checkpoint_epoch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointInfo, kernel_epoch_),
  };
  CheckpointInfo_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CheckpointInfo_descriptor_,
      CheckpointInfo::default_instance_,
      CheckpointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointInfo, _has_bits_[0]),
      -1,
      -1,
      sizeof(CheckpointInfo),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CheckpointInfo, _internal_metadata_),
      -1);
  SwapTable_descriptor_ = file->message_type(16);
  static const int SwapTable_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapTable, table_a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapTable, table_b_),
  };
  SwapTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SwapTable_descriptor_,
      SwapTable::default_instance_,
      SwapTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(SwapTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SwapTable, _internal_metadata_),
      -1);
  ClearTable_descriptor_ = file->message_type(17);
  static const int ClearTable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearTable, table_),
  };
  ClearTable_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      ClearTable_descriptor_,
      ClearTable::default_instance_,
      ClearTable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearTable, _has_bits_[0]),
      -1,
      -1,
      sizeof(ClearTable),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClearTable, _internal_metadata_),
      -1);
  EnableTrigger_descriptor_ = file->message_type(18);
  static const int EnableTrigger_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTrigger, trigger_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTrigger, table_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTrigger, enable_),
  };
  EnableTrigger_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      EnableTrigger_descriptor_,
      EnableTrigger::default_instance_,
      EnableTrigger_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTrigger, _has_bits_[0]),
      -1,
      -1,
      sizeof(EnableTrigger),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EnableTrigger, _internal_metadata_),
      -1);
  CheckpointType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_worker_2fworker_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RegisterWorkerRequest_descriptor_, &RegisterWorkerRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShardAssignment_descriptor_, &ShardAssignment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShardAssignmentRequest_descriptor_, &ShardAssignmentRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ShardInfo_descriptor_, &ShardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MethodStats_descriptor_, &MethodStats::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KernelRequest_descriptor_, &KernelRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KernelDone_descriptor_, &KernelDone::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IteratorRequest_descriptor_, &IteratorRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      IteratorResponse_descriptor_, &IteratorResponse::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      HashGet_descriptor_, &HashGet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TableData_descriptor_, &TableData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      KVPairData_descriptor_, &KVPairData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckpointRequest_descriptor_, &CheckpointRequest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TerminationNotification_descriptor_, &TerminationNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      StartRestore_descriptor_, &StartRestore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CheckpointInfo_descriptor_, &CheckpointInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SwapTable_descriptor_, &SwapTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      ClearTable_descriptor_, &ClearTable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      EnableTrigger_descriptor_, &EnableTrigger::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_worker_2fworker_2eproto() {
  delete RegisterWorkerRequest::default_instance_;
  delete RegisterWorkerRequest_reflection_;
  delete ShardAssignment::default_instance_;
  delete ShardAssignment_reflection_;
  delete ShardAssignmentRequest::default_instance_;
  delete ShardAssignmentRequest_reflection_;
  delete ShardInfo::default_instance_;
  delete ShardInfo_reflection_;
  delete MethodStats::default_instance_;
  delete MethodStats_reflection_;
  delete KernelRequest::default_instance_;
  delete KernelRequest_reflection_;
  delete KernelDone::default_instance_;
  delete KernelDone_reflection_;
  delete IteratorRequest::default_instance_;
  delete IteratorRequest_reflection_;
  delete IteratorResponse::default_instance_;
  delete IteratorResponse_reflection_;
  delete HashGet::default_instance_;
  delete HashGet_reflection_;
  delete TableData::default_instance_;
  delete TableData_reflection_;
  delete KVPairData::default_instance_;
  delete KVPairData_reflection_;
  delete CheckpointRequest::default_instance_;
  delete CheckpointRequest_reflection_;
  delete TerminationNotification::default_instance_;
  delete TerminationNotification_reflection_;
  delete StartRestore::default_instance_;
  delete StartRestore_reflection_;
  delete CheckpointInfo::default_instance_;
  delete CheckpointInfo_reflection_;
  delete SwapTable::default_instance_;
  delete SwapTable_reflection_;
  delete ClearTable::default_instance_;
  delete ClearTable_reflection_;
  delete EnableTrigger::default_instance_;
  delete EnableTrigger_reflection_;
}

void protobuf_AddDesc_worker_2fworker_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_worker_2fworker_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::dsm::protobuf_AddDesc_util_2fcommon_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023worker/worker.proto\022\003dsm\032\021util/common."
    "proto\"#\n\025RegisterWorkerRequest\022\n\n\002id\030\001 \002"
    "(\005\"C\n\017ShardAssignment\022\r\n\005table\030\001 \002(\005\022\r\n\005"
    "shard\030\002 \002(\005\022\022\n\nnew_worker\030\004 \002(\005\">\n\026Shard"
    "AssignmentRequest\022$\n\006assign\030\001 \003(\0132\024.dsm."
    "ShardAssignment\"M\n\tShardInfo\022\r\n\005table\030\001 "
    "\002(\r\022\r\n\005shard\030\002 \002(\r\022\017\n\007entries\030\003 \002(\004\022\021\n\005o"
    "wner\030\004 \002(\005:\002-1\"Y\n\013MethodStats\022\022\n\ntotal_t"
    "ime\030\001 \002(\001\022\022\n\nshard_time\030\002 \002(\001\022\r\n\005calls\030\003"
    " \002(\005\022\023\n\013shard_calls\030\004 \002(\005\"f\n\rKernelReque"
    "st\022\016\n\006kernel\030\001 \002(\t\022\016\n\006method\030\002 \002(\t\022\r\n\005ta"
    "ble\030\003 \001(\005\022\r\n\005shard\030\004 \001(\005\022\027\n\004args\030\005 \002(\0132\t"
    ".dsm.Args\"P\n\nKernelDone\022\"\n\006kernel\030\001 \002(\0132"
    "\022.dsm.KernelRequest\022\036\n\006shards\030\005 \003(\0132\016.ds"
    "m.ShardInfo\"U\n\017IteratorRequest\022\r\n\005table\030"
    "\001 \002(\r\022\r\n\005shard\030\002 \002(\r\022\016\n\002id\030\003 \001(\005:\002-1\022\024\n\t"
    "row_count\030\004 \001(\r:\0011\"[\n\020IteratorResponse\022\n"
    "\n\002id\030\001 \002(\r\022\014\n\004done\030\002 \002(\010\022\013\n\003key\030\003 \003(\014\022\r\n"
    "\005value\030\004 \003(\014\022\021\n\trow_count\030\005 \002(\r\"C\n\007HashG"
    "et\022\r\n\005table\030\001 \002(\r\022\r\n\005shard\030\002 \002(\r\022\013\n\003key\030"
    "\003 \001(\014\022\r\n\005index\030\004 \001(\r\"\262\001\n\tTableData\022\016\n\006so"
    "urce\030\001 \002(\r\022\r\n\005table\030\002 \002(\r\022\r\n\005shard\030\003 \002(\r"
    "\022\014\n\004done\030\004 \002(\010\022\022\n\ntable_data\030\005 \001(\014\022\035\n\010re"
    "c_data\030\006 \003(\0132\013.dsm.Record\022\r\n\005epoch\030\013 \001(\005"
    "\022\022\n\006marker\030\014 \001(\005:\002-1\022\023\n\013missing_key\030\r \001("
    "\010\"\257\001\n\nKVPairData\022\016\n\006source\030\001 \002(\r\022\r\n\005tabl"
    "e\030\002 \002(\r\022\r\n\005shard\030\003 \002(\r\022\014\n\004done\030\004 \002(\010\022\022\n\n"
    "table_data\030\005 \001(\014\022\031\n\007kv_data\030\006 \003(\0132\010.dsm."
    "Arg\022\r\n\005epoch\030\013 \001(\005\022\022\n\006marker\030\014 \001(\005:\002-1\022\023"
    "\n\013missing_key\030\r \001(\010\"J\n\021CheckpointRequest"
    "\022\r\n\005epoch\030\001 \002(\005\022\027\n\017checkpoint_type\030\002 \002(\005"
    "\022\r\n\005table\030\003 \003(\005\"(\n\027TerminationNotificati"
    "on\022\r\n\005epoch\030\001 \002(\005\"\035\n\014StartRestore\022\r\n\005epo"
    "ch\030\001 \002(\005\"@\n\016CheckpointInfo\022\030\n\020checkpoint"
    "_epoch\030\001 \002(\005\022\024\n\014kernel_epoch\030\002 \002(\005\"-\n\tSw"
    "apTable\022\017\n\007table_a\030\001 \002(\005\022\017\n\007table_b\030\002 \002("
    "\005\"\033\n\nClearTable\022\r\n\005table\030\001 \002(\005\"B\n\rEnable"
    "Trigger\022\022\n\ntrigger_id\030\001 \002(\005\022\r\n\005table\030\002 \002"
    "(\005\022\016\n\006enable\030\003 \002(\010*G\n\016CheckpointType\022\013\n\007"
    "CP_NONE\020\000\022\030\n\024CP_MASTER_CONTROLLED\020\001\022\016\n\nC"
    "P_ROLLING\020\002B\002H\001", 1615);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "worker/worker.proto", &protobuf_RegisterTypes);
  RegisterWorkerRequest::default_instance_ = new RegisterWorkerRequest();
  ShardAssignment::default_instance_ = new ShardAssignment();
  ShardAssignmentRequest::default_instance_ = new ShardAssignmentRequest();
  ShardInfo::default_instance_ = new ShardInfo();
  MethodStats::default_instance_ = new MethodStats();
  KernelRequest::default_instance_ = new KernelRequest();
  KernelDone::default_instance_ = new KernelDone();
  IteratorRequest::default_instance_ = new IteratorRequest();
  IteratorResponse::default_instance_ = new IteratorResponse();
  HashGet::default_instance_ = new HashGet();
  TableData::default_instance_ = new TableData();
  KVPairData::default_instance_ = new KVPairData();
  CheckpointRequest::default_instance_ = new CheckpointRequest();
  TerminationNotification::default_instance_ = new TerminationNotification();
  StartRestore::default_instance_ = new StartRestore();
  CheckpointInfo::default_instance_ = new CheckpointInfo();
  SwapTable::default_instance_ = new SwapTable();
  ClearTable::default_instance_ = new ClearTable();
  EnableTrigger::default_instance_ = new EnableTrigger();
  RegisterWorkerRequest::default_instance_->InitAsDefaultInstance();
  ShardAssignment::default_instance_->InitAsDefaultInstance();
  ShardAssignmentRequest::default_instance_->InitAsDefaultInstance();
  ShardInfo::default_instance_->InitAsDefaultInstance();
  MethodStats::default_instance_->InitAsDefaultInstance();
  KernelRequest::default_instance_->InitAsDefaultInstance();
  KernelDone::default_instance_->InitAsDefaultInstance();
  IteratorRequest::default_instance_->InitAsDefaultInstance();
  IteratorResponse::default_instance_->InitAsDefaultInstance();
  HashGet::default_instance_->InitAsDefaultInstance();
  TableData::default_instance_->InitAsDefaultInstance();
  KVPairData::default_instance_->InitAsDefaultInstance();
  CheckpointRequest::default_instance_->InitAsDefaultInstance();
  TerminationNotification::default_instance_->InitAsDefaultInstance();
  StartRestore::default_instance_->InitAsDefaultInstance();
  CheckpointInfo::default_instance_->InitAsDefaultInstance();
  SwapTable::default_instance_->InitAsDefaultInstance();
  ClearTable::default_instance_->InitAsDefaultInstance();
  EnableTrigger::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_worker_2fworker_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_worker_2fworker_2eproto {
  StaticDescriptorInitializer_worker_2fworker_2eproto() {
    protobuf_AddDesc_worker_2fworker_2eproto();
  }
} static_descriptor_initializer_worker_2fworker_2eproto_;
const ::google::protobuf::EnumDescriptor* CheckpointType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckpointType_descriptor_;
}
bool CheckpointType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RegisterWorkerRequest::kIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RegisterWorkerRequest::RegisterWorkerRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.RegisterWorkerRequest)
}

void RegisterWorkerRequest::InitAsDefaultInstance() {
}

RegisterWorkerRequest::RegisterWorkerRequest(const RegisterWorkerRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.RegisterWorkerRequest)
}

void RegisterWorkerRequest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RegisterWorkerRequest::~RegisterWorkerRequest() {
  // @@protoc_insertion_point(destructor:dsm.RegisterWorkerRequest)
  SharedDtor();
}

void RegisterWorkerRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RegisterWorkerRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RegisterWorkerRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RegisterWorkerRequest_descriptor_;
}

const RegisterWorkerRequest& RegisterWorkerRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

RegisterWorkerRequest* RegisterWorkerRequest::default_instance_ = NULL;

RegisterWorkerRequest* RegisterWorkerRequest::New(::google::protobuf::Arena* arena) const {
  RegisterWorkerRequest* n = new RegisterWorkerRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RegisterWorkerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.RegisterWorkerRequest)
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RegisterWorkerRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.RegisterWorkerRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.RegisterWorkerRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.RegisterWorkerRequest)
  return false;
#undef DO_
}

void RegisterWorkerRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.RegisterWorkerRequest)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.RegisterWorkerRequest)
}

::google::protobuf::uint8* RegisterWorkerRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.RegisterWorkerRequest)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.RegisterWorkerRequest)
  return target;
}

int RegisterWorkerRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.RegisterWorkerRequest)
  int total_size = 0;

  // required int32 id = 1;
  if (has_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->id());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RegisterWorkerRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.RegisterWorkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const RegisterWorkerRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const RegisterWorkerRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.RegisterWorkerRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.RegisterWorkerRequest)
    MergeFrom(*source);
  }
}

void RegisterWorkerRequest::MergeFrom(const RegisterWorkerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.RegisterWorkerRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void RegisterWorkerRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.RegisterWorkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RegisterWorkerRequest::CopyFrom(const RegisterWorkerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.RegisterWorkerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RegisterWorkerRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RegisterWorkerRequest::Swap(RegisterWorkerRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RegisterWorkerRequest::InternalSwap(RegisterWorkerRequest* other) {
  std::swap(id_, other->id_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RegisterWorkerRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RegisterWorkerRequest_descriptor_;
  metadata.reflection = RegisterWorkerRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RegisterWorkerRequest

// required int32 id = 1;
bool RegisterWorkerRequest::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RegisterWorkerRequest::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void RegisterWorkerRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void RegisterWorkerRequest::clear_id() {
  id_ = 0;
  clear_has_id();
}
 ::google::protobuf::int32 RegisterWorkerRequest::id() const {
  // @@protoc_insertion_point(field_get:dsm.RegisterWorkerRequest.id)
  return id_;
}
 void RegisterWorkerRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dsm.RegisterWorkerRequest.id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardAssignment::kTableFieldNumber;
const int ShardAssignment::kShardFieldNumber;
const int ShardAssignment::kNewWorkerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardAssignment::ShardAssignment()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.ShardAssignment)
}

void ShardAssignment::InitAsDefaultInstance() {
}

ShardAssignment::ShardAssignment(const ShardAssignment& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.ShardAssignment)
}

void ShardAssignment::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0;
  shard_ = 0;
  new_worker_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignment::~ShardAssignment() {
  // @@protoc_insertion_point(destructor:dsm.ShardAssignment)
  SharedDtor();
}

void ShardAssignment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignment_descriptor_;
}

const ShardAssignment& ShardAssignment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

ShardAssignment* ShardAssignment::default_instance_ = NULL;

ShardAssignment* ShardAssignment::New(::google::protobuf::Arena* arena) const {
  ShardAssignment* n = new ShardAssignment;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardAssignment::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.ShardAssignment)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShardAssignment, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShardAssignment*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(table_, new_worker_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShardAssignment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.ShardAssignment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required int32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_new_worker;
        break;
      }

      // required int32 new_worker = 4;
      case 4: {
        if (tag == 32) {
         parse_new_worker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &new_worker_)));
          set_has_new_worker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.ShardAssignment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.ShardAssignment)
  return false;
#undef DO_
}

void ShardAssignment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.ShardAssignment)
  // required int32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table(), output);
  }

  // required int32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shard(), output);
  }

  // required int32 new_worker = 4;
  if (has_new_worker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->new_worker(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.ShardAssignment)
}

::google::protobuf::uint8* ShardAssignment::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.ShardAssignment)
  // required int32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table(), target);
  }

  // required int32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->shard(), target);
  }

  // required int32 new_worker = 4;
  if (has_new_worker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->new_worker(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.ShardAssignment)
  return target;
}

int ShardAssignment::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.ShardAssignment)
  int total_size = 0;

  if (has_table()) {
    // required int32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table());
  }

  if (has_shard()) {
    // required int32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard());
  }

  if (has_new_worker()) {
    // required int32 new_worker = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_worker());
  }

  return total_size;
}
int ShardAssignment::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.ShardAssignment)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table());

    // required int32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard());

    // required int32 new_worker = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->new_worker());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignment::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.ShardAssignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShardAssignment* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardAssignment>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.ShardAssignment)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.ShardAssignment)
    MergeFrom(*source);
  }
}

void ShardAssignment::MergeFrom(const ShardAssignment& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.ShardAssignment)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_new_worker()) {
      set_new_worker(from.new_worker());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShardAssignment::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.ShardAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignment::CopyFrom(const ShardAssignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.ShardAssignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ShardAssignment::Swap(ShardAssignment* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardAssignment::InternalSwap(ShardAssignment* other) {
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(new_worker_, other->new_worker_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardAssignment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignment_descriptor_;
  metadata.reflection = ShardAssignment_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShardAssignment

// required int32 table = 1;
bool ShardAssignment::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShardAssignment::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void ShardAssignment::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShardAssignment::clear_table() {
  table_ = 0;
  clear_has_table();
}
 ::google::protobuf::int32 ShardAssignment::table() const {
  // @@protoc_insertion_point(field_get:dsm.ShardAssignment.table)
  return table_;
}
 void ShardAssignment::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardAssignment.table)
}

// required int32 shard = 2;
bool ShardAssignment::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShardAssignment::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
void ShardAssignment::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShardAssignment::clear_shard() {
  shard_ = 0;
  clear_has_shard();
}
 ::google::protobuf::int32 ShardAssignment::shard() const {
  // @@protoc_insertion_point(field_get:dsm.ShardAssignment.shard)
  return shard_;
}
 void ShardAssignment::set_shard(::google::protobuf::int32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardAssignment.shard)
}

// required int32 new_worker = 4;
bool ShardAssignment::has_new_worker() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShardAssignment::set_has_new_worker() {
  _has_bits_[0] |= 0x00000004u;
}
void ShardAssignment::clear_has_new_worker() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShardAssignment::clear_new_worker() {
  new_worker_ = 0;
  clear_has_new_worker();
}
 ::google::protobuf::int32 ShardAssignment::new_worker() const {
  // @@protoc_insertion_point(field_get:dsm.ShardAssignment.new_worker)
  return new_worker_;
}
 void ShardAssignment::set_new_worker(::google::protobuf::int32 value) {
  set_has_new_worker();
  new_worker_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardAssignment.new_worker)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardAssignmentRequest::kAssignFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardAssignmentRequest::ShardAssignmentRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.ShardAssignmentRequest)
}

void ShardAssignmentRequest::InitAsDefaultInstance() {
}

ShardAssignmentRequest::ShardAssignmentRequest(const ShardAssignmentRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.ShardAssignmentRequest)
}

void ShardAssignmentRequest::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardAssignmentRequest::~ShardAssignmentRequest() {
  // @@protoc_insertion_point(destructor:dsm.ShardAssignmentRequest)
  SharedDtor();
}

void ShardAssignmentRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardAssignmentRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardAssignmentRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardAssignmentRequest_descriptor_;
}

const ShardAssignmentRequest& ShardAssignmentRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

ShardAssignmentRequest* ShardAssignmentRequest::default_instance_ = NULL;

ShardAssignmentRequest* ShardAssignmentRequest::New(::google::protobuf::Arena* arena) const {
  ShardAssignmentRequest* n = new ShardAssignmentRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardAssignmentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.ShardAssignmentRequest)
  assign_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShardAssignmentRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.ShardAssignmentRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .dsm.ShardAssignment assign = 1;
      case 1: {
        if (tag == 10) {
          DO_(input->IncrementRecursionDepth());
         parse_loop_assign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_assign()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_loop_assign;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.ShardAssignmentRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.ShardAssignmentRequest)
  return false;
#undef DO_
}

void ShardAssignmentRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.ShardAssignmentRequest)
  // repeated .dsm.ShardAssignment assign = 1;
  for (unsigned int i = 0, n = this->assign_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->assign(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.ShardAssignmentRequest)
}

::google::protobuf::uint8* ShardAssignmentRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.ShardAssignmentRequest)
  // repeated .dsm.ShardAssignment assign = 1;
  for (unsigned int i = 0, n = this->assign_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->assign(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.ShardAssignmentRequest)
  return target;
}

int ShardAssignmentRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.ShardAssignmentRequest)
  int total_size = 0;

  // repeated .dsm.ShardAssignment assign = 1;
  total_size += 1 * this->assign_size();
  for (int i = 0; i < this->assign_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->assign(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardAssignmentRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.ShardAssignmentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShardAssignmentRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardAssignmentRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.ShardAssignmentRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.ShardAssignmentRequest)
    MergeFrom(*source);
  }
}

void ShardAssignmentRequest::MergeFrom(const ShardAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.ShardAssignmentRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  assign_.MergeFrom(from.assign_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShardAssignmentRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.ShardAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardAssignmentRequest::CopyFrom(const ShardAssignmentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.ShardAssignmentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardAssignmentRequest::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->assign())) return false;
  return true;
}

void ShardAssignmentRequest::Swap(ShardAssignmentRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardAssignmentRequest::InternalSwap(ShardAssignmentRequest* other) {
  assign_.UnsafeArenaSwap(&other->assign_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardAssignmentRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardAssignmentRequest_descriptor_;
  metadata.reflection = ShardAssignmentRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShardAssignmentRequest

// repeated .dsm.ShardAssignment assign = 1;
int ShardAssignmentRequest::assign_size() const {
  return assign_.size();
}
void ShardAssignmentRequest::clear_assign() {
  assign_.Clear();
}
const ::dsm::ShardAssignment& ShardAssignmentRequest::assign(int index) const {
  // @@protoc_insertion_point(field_get:dsm.ShardAssignmentRequest.assign)
  return assign_.Get(index);
}
::dsm::ShardAssignment* ShardAssignmentRequest::mutable_assign(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.ShardAssignmentRequest.assign)
  return assign_.Mutable(index);
}
::dsm::ShardAssignment* ShardAssignmentRequest::add_assign() {
  // @@protoc_insertion_point(field_add:dsm.ShardAssignmentRequest.assign)
  return assign_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::ShardAssignment >*
ShardAssignmentRequest::mutable_assign() {
  // @@protoc_insertion_point(field_mutable_list:dsm.ShardAssignmentRequest.assign)
  return &assign_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::ShardAssignment >&
ShardAssignmentRequest::assign() const {
  // @@protoc_insertion_point(field_list:dsm.ShardAssignmentRequest.assign)
  return assign_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ShardInfo::kTableFieldNumber;
const int ShardInfo::kShardFieldNumber;
const int ShardInfo::kEntriesFieldNumber;
const int ShardInfo::kOwnerFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ShardInfo::ShardInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.ShardInfo)
}

void ShardInfo::InitAsDefaultInstance() {
}

ShardInfo::ShardInfo(const ShardInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.ShardInfo)
}

void ShardInfo::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  entries_ = GOOGLE_ULONGLONG(0);
  owner_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShardInfo::~ShardInfo() {
  // @@protoc_insertion_point(destructor:dsm.ShardInfo)
  SharedDtor();
}

void ShardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShardInfo_descriptor_;
}

const ShardInfo& ShardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

ShardInfo* ShardInfo::default_instance_ = NULL;

ShardInfo* ShardInfo::New(::google::protobuf::Arena* arena) const {
  ShardInfo* n = new ShardInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ShardInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.ShardInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(ShardInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<ShardInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(table_, entries_);
    owner_ = -1;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ShardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.ShardInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required uint32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_entries;
        break;
      }

      // required uint64 entries = 3;
      case 3: {
        if (tag == 24) {
         parse_entries:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &entries_)));
          set_has_entries();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_owner;
        break;
      }

      // required int32 owner = 4 [default = -1];
      case 4: {
        if (tag == 32) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.ShardInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.ShardInfo)
  return false;
#undef DO_
}

void ShardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.ShardInfo)
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }

  // required uint64 entries = 3;
  if (has_entries()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->entries(), output);
  }

  // required int32 owner = 4 [default = -1];
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->owner(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.ShardInfo)
}

::google::protobuf::uint8* ShardInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.ShardInfo)
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }

  // required uint64 entries = 3;
  if (has_entries()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->entries(), target);
  }

  // required int32 owner = 4 [default = -1];
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->owner(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.ShardInfo)
  return target;
}

int ShardInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.ShardInfo)
  int total_size = 0;

  if (has_table()) {
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());
  }

  if (has_shard()) {
    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());
  }

  if (has_entries()) {
    // required uint64 entries = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entries());
  }

  if (has_owner()) {
    // required int32 owner = 4 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());
  }

  return total_size;
}
int ShardInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.ShardInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());

    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());

    // required uint64 entries = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->entries());

    // required int32 owner = 4 [default = -1];
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->owner());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShardInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.ShardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ShardInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ShardInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.ShardInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.ShardInfo)
    MergeFrom(*source);
  }
}

void ShardInfo::MergeFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.ShardInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_entries()) {
      set_entries(from.entries());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ShardInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShardInfo::CopyFrom(const ShardInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.ShardInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ShardInfo::Swap(ShardInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ShardInfo::InternalSwap(ShardInfo* other) {
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(entries_, other->entries_);
  std::swap(owner_, other->owner_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ShardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShardInfo_descriptor_;
  metadata.reflection = ShardInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ShardInfo

// required uint32 table = 1;
bool ShardInfo::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ShardInfo::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void ShardInfo::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void ShardInfo::clear_table() {
  table_ = 0u;
  clear_has_table();
}
 ::google::protobuf::uint32 ShardInfo::table() const {
  // @@protoc_insertion_point(field_get:dsm.ShardInfo.table)
  return table_;
}
 void ShardInfo::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardInfo.table)
}

// required uint32 shard = 2;
bool ShardInfo::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void ShardInfo::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
void ShardInfo::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
void ShardInfo::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
 ::google::protobuf::uint32 ShardInfo::shard() const {
  // @@protoc_insertion_point(field_get:dsm.ShardInfo.shard)
  return shard_;
}
 void ShardInfo::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardInfo.shard)
}

// required uint64 entries = 3;
bool ShardInfo::has_entries() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void ShardInfo::set_has_entries() {
  _has_bits_[0] |= 0x00000004u;
}
void ShardInfo::clear_has_entries() {
  _has_bits_[0] &= ~0x00000004u;
}
void ShardInfo::clear_entries() {
  entries_ = GOOGLE_ULONGLONG(0);
  clear_has_entries();
}
 ::google::protobuf::uint64 ShardInfo::entries() const {
  // @@protoc_insertion_point(field_get:dsm.ShardInfo.entries)
  return entries_;
}
 void ShardInfo::set_entries(::google::protobuf::uint64 value) {
  set_has_entries();
  entries_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardInfo.entries)
}

// required int32 owner = 4 [default = -1];
bool ShardInfo::has_owner() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void ShardInfo::set_has_owner() {
  _has_bits_[0] |= 0x00000008u;
}
void ShardInfo::clear_has_owner() {
  _has_bits_[0] &= ~0x00000008u;
}
void ShardInfo::clear_owner() {
  owner_ = -1;
  clear_has_owner();
}
 ::google::protobuf::int32 ShardInfo::owner() const {
  // @@protoc_insertion_point(field_get:dsm.ShardInfo.owner)
  return owner_;
}
 void ShardInfo::set_owner(::google::protobuf::int32 value) {
  set_has_owner();
  owner_ = value;
  // @@protoc_insertion_point(field_set:dsm.ShardInfo.owner)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MethodStats::kTotalTimeFieldNumber;
const int MethodStats::kShardTimeFieldNumber;
const int MethodStats::kCallsFieldNumber;
const int MethodStats::kShardCallsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MethodStats::MethodStats()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.MethodStats)
}

void MethodStats::InitAsDefaultInstance() {
}

MethodStats::MethodStats(const MethodStats& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.MethodStats)
}

void MethodStats::SharedCtor() {
  _cached_size_ = 0;
  total_time_ = 0;
  shard_time_ = 0;
  calls_ = 0;
  shard_calls_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MethodStats::~MethodStats() {
  // @@protoc_insertion_point(destructor:dsm.MethodStats)
  SharedDtor();
}

void MethodStats::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MethodStats::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MethodStats::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MethodStats_descriptor_;
}

const MethodStats& MethodStats::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

MethodStats* MethodStats::default_instance_ = NULL;

MethodStats* MethodStats::New(::google::protobuf::Arena* arena) const {
  MethodStats* n = new MethodStats;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MethodStats::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.MethodStats)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(MethodStats, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<MethodStats*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(total_time_, shard_calls_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MethodStats::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.MethodStats)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double total_time = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &total_time_)));
          set_has_total_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_shard_time;
        break;
      }

      // required double shard_time = 2;
      case 2: {
        if (tag == 17) {
         parse_shard_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shard_time_)));
          set_has_shard_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_calls;
        break;
      }

      // required int32 calls = 3;
      case 3: {
        if (tag == 24) {
         parse_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &calls_)));
          set_has_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shard_calls;
        break;
      }

      // required int32 shard_calls = 4;
      case 4: {
        if (tag == 32) {
         parse_shard_calls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_calls_)));
          set_has_shard_calls();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.MethodStats)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.MethodStats)
  return false;
#undef DO_
}

void MethodStats::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.MethodStats)
  // required double total_time = 1;
  if (has_total_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->total_time(), output);
  }

  // required double shard_time = 2;
  if (has_shard_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->shard_time(), output);
  }

  // required int32 calls = 3;
  if (has_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->calls(), output);
  }

  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shard_calls(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.MethodStats)
}

::google::protobuf::uint8* MethodStats::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.MethodStats)
  // required double total_time = 1;
  if (has_total_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->total_time(), target);
  }

  // required double shard_time = 2;
  if (has_shard_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->shard_time(), target);
  }

  // required int32 calls = 3;
  if (has_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->calls(), target);
  }

  // required int32 shard_calls = 4;
  if (has_shard_calls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shard_calls(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.MethodStats)
  return target;
}

int MethodStats::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.MethodStats)
  int total_size = 0;

  if (has_total_time()) {
    // required double total_time = 1;
    total_size += 1 + 8;
  }

  if (has_shard_time()) {
    // required double shard_time = 2;
    total_size += 1 + 8;
  }

  if (has_calls()) {
    // required int32 calls = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->calls());
  }

  if (has_shard_calls()) {
    // required int32 shard_calls = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard_calls());
  }

  return total_size;
}
int MethodStats::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.MethodStats)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double total_time = 1;
    total_size += 1 + 8;

    // required double shard_time = 2;
    total_size += 1 + 8;

    // required int32 calls = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->calls());

    // required int32 shard_calls = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shard_calls());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MethodStats::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.MethodStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MethodStats* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MethodStats>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.MethodStats)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.MethodStats)
    MergeFrom(*source);
  }
}

void MethodStats::MergeFrom(const MethodStats& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.MethodStats)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_total_time()) {
      set_total_time(from.total_time());
    }
    if (from.has_shard_time()) {
      set_shard_time(from.shard_time());
    }
    if (from.has_calls()) {
      set_calls(from.calls());
    }
    if (from.has_shard_calls()) {
      set_shard_calls(from.shard_calls());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MethodStats::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.MethodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MethodStats::CopyFrom(const MethodStats& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.MethodStats)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MethodStats::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void MethodStats::Swap(MethodStats* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MethodStats::InternalSwap(MethodStats* other) {
  std::swap(total_time_, other->total_time_);
  std::swap(shard_time_, other->shard_time_);
  std::swap(calls_, other->calls_);
  std::swap(shard_calls_, other->shard_calls_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MethodStats::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MethodStats_descriptor_;
  metadata.reflection = MethodStats_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MethodStats

// required double total_time = 1;
bool MethodStats::has_total_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MethodStats::set_has_total_time() {
  _has_bits_[0] |= 0x00000001u;
}
void MethodStats::clear_has_total_time() {
  _has_bits_[0] &= ~0x00000001u;
}
void MethodStats::clear_total_time() {
  total_time_ = 0;
  clear_has_total_time();
}
 double MethodStats::total_time() const {
  // @@protoc_insertion_point(field_get:dsm.MethodStats.total_time)
  return total_time_;
}
 void MethodStats::set_total_time(double value) {
  set_has_total_time();
  total_time_ = value;
  // @@protoc_insertion_point(field_set:dsm.MethodStats.total_time)
}

// required double shard_time = 2;
bool MethodStats::has_shard_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void MethodStats::set_has_shard_time() {
  _has_bits_[0] |= 0x00000002u;
}
void MethodStats::clear_has_shard_time() {
  _has_bits_[0] &= ~0x00000002u;
}
void MethodStats::clear_shard_time() {
  shard_time_ = 0;
  clear_has_shard_time();
}
 double MethodStats::shard_time() const {
  // @@protoc_insertion_point(field_get:dsm.MethodStats.shard_time)
  return shard_time_;
}
 void MethodStats::set_shard_time(double value) {
  set_has_shard_time();
  shard_time_ = value;
  // @@protoc_insertion_point(field_set:dsm.MethodStats.shard_time)
}

// required int32 calls = 3;
bool MethodStats::has_calls() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void MethodStats::set_has_calls() {
  _has_bits_[0] |= 0x00000004u;
}
void MethodStats::clear_has_calls() {
  _has_bits_[0] &= ~0x00000004u;
}
void MethodStats::clear_calls() {
  calls_ = 0;
  clear_has_calls();
}
 ::google::protobuf::int32 MethodStats::calls() const {
  // @@protoc_insertion_point(field_get:dsm.MethodStats.calls)
  return calls_;
}
 void MethodStats::set_calls(::google::protobuf::int32 value) {
  set_has_calls();
  calls_ = value;
  // @@protoc_insertion_point(field_set:dsm.MethodStats.calls)
}

// required int32 shard_calls = 4;
bool MethodStats::has_shard_calls() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void MethodStats::set_has_shard_calls() {
  _has_bits_[0] |= 0x00000008u;
}
void MethodStats::clear_has_shard_calls() {
  _has_bits_[0] &= ~0x00000008u;
}
void MethodStats::clear_shard_calls() {
  shard_calls_ = 0;
  clear_has_shard_calls();
}
 ::google::protobuf::int32 MethodStats::shard_calls() const {
  // @@protoc_insertion_point(field_get:dsm.MethodStats.shard_calls)
  return shard_calls_;
}
 void MethodStats::set_shard_calls(::google::protobuf::int32 value) {
  set_has_shard_calls();
  shard_calls_ = value;
  // @@protoc_insertion_point(field_set:dsm.MethodStats.shard_calls)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KernelRequest::kKernelFieldNumber;
const int KernelRequest::kMethodFieldNumber;
const int KernelRequest::kTableFieldNumber;
const int KernelRequest::kShardFieldNumber;
const int KernelRequest::kArgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KernelRequest::KernelRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.KernelRequest)
}

void KernelRequest::InitAsDefaultInstance() {
  args_ = const_cast< ::dsm::Args*>(&::dsm::Args::default_instance());
}

KernelRequest::KernelRequest(const KernelRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.KernelRequest)
}

void KernelRequest::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  kernel_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  table_ = 0;
  shard_ = 0;
  args_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KernelRequest::~KernelRequest() {
  // @@protoc_insertion_point(destructor:dsm.KernelRequest)
  SharedDtor();
}

void KernelRequest::SharedDtor() {
  kernel_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  method_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete args_;
  }
}

void KernelRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KernelRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KernelRequest_descriptor_;
}

const KernelRequest& KernelRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

KernelRequest* KernelRequest::default_instance_ = NULL;

KernelRequest* KernelRequest::New(::google::protobuf::Arena* arena) const {
  KernelRequest* n = new KernelRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KernelRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.KernelRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KernelRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KernelRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 31u) {
    ZR_(table_, shard_);
    if (has_kernel()) {
      kernel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_method()) {
      method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_args()) {
      if (args_ != NULL) args_->::dsm::Args::Clear();
    }
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KernelRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.KernelRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string kernel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_kernel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->kernel().data(), this->kernel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dsm.KernelRequest.kernel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_method;
        break;
      }

      // required string method = 2;
      case 2: {
        if (tag == 18) {
         parse_method:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_method()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->method().data(), this->method().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dsm.KernelRequest.method");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_table;
        break;
      }

      // optional int32 table = 3;
      case 3: {
        if (tag == 24) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_shard;
        break;
      }

      // optional int32 shard = 4;
      case 4: {
        if (tag == 32) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_args;
        break;
      }

      // required .dsm.Args args = 5;
      case 5: {
        if (tag == 42) {
         parse_args:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_args()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.KernelRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.KernelRequest)
  return false;
#undef DO_
}

void KernelRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.KernelRequest)
  // required string kernel = 1;
  if (has_kernel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel().data(), this->kernel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsm.KernelRequest.kernel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->kernel(), output);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsm.KernelRequest.method");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->method(), output);
  }

  // optional int32 table = 3;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->table(), output);
  }

  // optional int32 shard = 4;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->shard(), output);
  }

  // required .dsm.Args args = 5;
  if (has_args()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, *this->args_, output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.KernelRequest)
}

::google::protobuf::uint8* KernelRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.KernelRequest)
  // required string kernel = 1;
  if (has_kernel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->kernel().data(), this->kernel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsm.KernelRequest.kernel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->kernel(), target);
  }

  // required string method = 2;
  if (has_method()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->method().data(), this->method().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dsm.KernelRequest.method");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->method(), target);
  }

  // optional int32 table = 3;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->table(), target);
  }

  // optional int32 shard = 4;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->shard(), target);
  }

  // required .dsm.Args args = 5;
  if (has_args()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, *this->args_, false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.KernelRequest)
  return target;
}

int KernelRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.KernelRequest)
  int total_size = 0;

  if (has_kernel()) {
    // required string kernel = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kernel());
  }

  if (has_method()) {
    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());
  }

  if (has_args()) {
    // required .dsm.Args args = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->args_);
  }

  return total_size;
}
int KernelRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.KernelRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required string kernel = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->kernel());

    // required string method = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->method());

    // required .dsm.Args args = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->args_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional int32 table = 3;
    if (has_table()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->table());
    }

    // optional int32 shard = 4;
    if (has_shard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shard());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KernelRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.KernelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KernelRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KernelRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.KernelRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.KernelRequest)
    MergeFrom(*source);
  }
}

void KernelRequest::MergeFrom(const KernelRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.KernelRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kernel()) {
      set_has_kernel();
      kernel_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.kernel_);
    }
    if (from.has_method()) {
      set_has_method();
      method_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.method_);
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_args()) {
      mutable_args()->::dsm::Args::MergeFrom(from.args());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KernelRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.KernelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelRequest::CopyFrom(const KernelRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.KernelRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  if (has_args()) {
    if (!this->args_->IsInitialized()) return false;
  }
  return true;
}

void KernelRequest::Swap(KernelRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KernelRequest::InternalSwap(KernelRequest* other) {
  kernel_.Swap(&other->kernel_);
  method_.Swap(&other->method_);
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(args_, other->args_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KernelRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KernelRequest_descriptor_;
  metadata.reflection = KernelRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KernelRequest

// required string kernel = 1;
bool KernelRequest::has_kernel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KernelRequest::set_has_kernel() {
  _has_bits_[0] |= 0x00000001u;
}
void KernelRequest::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000001u;
}
void KernelRequest::clear_kernel() {
  kernel_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_kernel();
}
 const ::std::string& KernelRequest::kernel() const {
  // @@protoc_insertion_point(field_get:dsm.KernelRequest.kernel)
  return kernel_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KernelRequest::set_kernel(const ::std::string& value) {
  set_has_kernel();
  kernel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.KernelRequest.kernel)
}
 void KernelRequest::set_kernel(const char* value) {
  set_has_kernel();
  kernel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.KernelRequest.kernel)
}
 void KernelRequest::set_kernel(const char* value, size_t size) {
  set_has_kernel();
  kernel_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.KernelRequest.kernel)
}
 ::std::string* KernelRequest::mutable_kernel() {
  set_has_kernel();
  // @@protoc_insertion_point(field_mutable:dsm.KernelRequest.kernel)
  return kernel_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KernelRequest::release_kernel() {
  // @@protoc_insertion_point(field_release:dsm.KernelRequest.kernel)
  clear_has_kernel();
  return kernel_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KernelRequest::set_allocated_kernel(::std::string* kernel) {
  if (kernel != NULL) {
    set_has_kernel();
  } else {
    clear_has_kernel();
  }
  kernel_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), kernel);
  // @@protoc_insertion_point(field_set_allocated:dsm.KernelRequest.kernel)
}

// required string method = 2;
bool KernelRequest::has_method() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KernelRequest::set_has_method() {
  _has_bits_[0] |= 0x00000002u;
}
void KernelRequest::clear_has_method() {
  _has_bits_[0] &= ~0x00000002u;
}
void KernelRequest::clear_method() {
  method_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_method();
}
 const ::std::string& KernelRequest::method() const {
  // @@protoc_insertion_point(field_get:dsm.KernelRequest.method)
  return method_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KernelRequest::set_method(const ::std::string& value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.KernelRequest.method)
}
 void KernelRequest::set_method(const char* value) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.KernelRequest.method)
}
 void KernelRequest::set_method(const char* value, size_t size) {
  set_has_method();
  method_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.KernelRequest.method)
}
 ::std::string* KernelRequest::mutable_method() {
  set_has_method();
  // @@protoc_insertion_point(field_mutable:dsm.KernelRequest.method)
  return method_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KernelRequest::release_method() {
  // @@protoc_insertion_point(field_release:dsm.KernelRequest.method)
  clear_has_method();
  return method_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KernelRequest::set_allocated_method(::std::string* method) {
  if (method != NULL) {
    set_has_method();
  } else {
    clear_has_method();
  }
  method_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), method);
  // @@protoc_insertion_point(field_set_allocated:dsm.KernelRequest.method)
}

// optional int32 table = 3;
bool KernelRequest::has_table() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KernelRequest::set_has_table() {
  _has_bits_[0] |= 0x00000004u;
}
void KernelRequest::clear_has_table() {
  _has_bits_[0] &= ~0x00000004u;
}
void KernelRequest::clear_table() {
  table_ = 0;
  clear_has_table();
}
 ::google::protobuf::int32 KernelRequest::table() const {
  // @@protoc_insertion_point(field_get:dsm.KernelRequest.table)
  return table_;
}
 void KernelRequest::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.KernelRequest.table)
}

// optional int32 shard = 4;
bool KernelRequest::has_shard() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KernelRequest::set_has_shard() {
  _has_bits_[0] |= 0x00000008u;
}
void KernelRequest::clear_has_shard() {
  _has_bits_[0] &= ~0x00000008u;
}
void KernelRequest::clear_shard() {
  shard_ = 0;
  clear_has_shard();
}
 ::google::protobuf::int32 KernelRequest::shard() const {
  // @@protoc_insertion_point(field_get:dsm.KernelRequest.shard)
  return shard_;
}
 void KernelRequest::set_shard(::google::protobuf::int32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.KernelRequest.shard)
}

// required .dsm.Args args = 5;
bool KernelRequest::has_args() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KernelRequest::set_has_args() {
  _has_bits_[0] |= 0x00000010u;
}
void KernelRequest::clear_has_args() {
  _has_bits_[0] &= ~0x00000010u;
}
void KernelRequest::clear_args() {
  if (args_ != NULL) args_->::dsm::Args::Clear();
  clear_has_args();
}
const ::dsm::Args& KernelRequest::args() const {
  // @@protoc_insertion_point(field_get:dsm.KernelRequest.args)
  return args_ != NULL ? *args_ : *default_instance_->args_;
}
::dsm::Args* KernelRequest::mutable_args() {
  set_has_args();
  if (args_ == NULL) {
    args_ = new ::dsm::Args;
  }
  // @@protoc_insertion_point(field_mutable:dsm.KernelRequest.args)
  return args_;
}
::dsm::Args* KernelRequest::release_args() {
  // @@protoc_insertion_point(field_release:dsm.KernelRequest.args)
  clear_has_args();
  ::dsm::Args* temp = args_;
  args_ = NULL;
  return temp;
}
void KernelRequest::set_allocated_args(::dsm::Args* args) {
  delete args_;
  args_ = args;
  if (args) {
    set_has_args();
  } else {
    clear_has_args();
  }
  // @@protoc_insertion_point(field_set_allocated:dsm.KernelRequest.args)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KernelDone::kKernelFieldNumber;
const int KernelDone::kShardsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KernelDone::KernelDone()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.KernelDone)
}

void KernelDone::InitAsDefaultInstance() {
  kernel_ = const_cast< ::dsm::KernelRequest*>(&::dsm::KernelRequest::default_instance());
}

KernelDone::KernelDone(const KernelDone& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.KernelDone)
}

void KernelDone::SharedCtor() {
  _cached_size_ = 0;
  kernel_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KernelDone::~KernelDone() {
  // @@protoc_insertion_point(destructor:dsm.KernelDone)
  SharedDtor();
}

void KernelDone::SharedDtor() {
  if (this != default_instance_) {
    delete kernel_;
  }
}

void KernelDone::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KernelDone::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KernelDone_descriptor_;
}

const KernelDone& KernelDone::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

KernelDone* KernelDone::default_instance_ = NULL;

KernelDone* KernelDone::New(::google::protobuf::Arena* arena) const {
  KernelDone* n = new KernelDone;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KernelDone::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.KernelDone)
  if (has_kernel()) {
    if (kernel_ != NULL) kernel_->::dsm::KernelRequest::Clear();
  }
  shards_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KernelDone::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.KernelDone)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .dsm.KernelRequest kernel = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_kernel()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_shards;
        break;
      }

      // repeated .dsm.ShardInfo shards = 5;
      case 5: {
        if (tag == 42) {
         parse_shards:
          DO_(input->IncrementRecursionDepth());
         parse_loop_shards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_shards()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_shards;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.KernelDone)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.KernelDone)
  return false;
#undef DO_
}

void KernelDone::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.KernelDone)
  // required .dsm.KernelRequest kernel = 1;
  if (has_kernel()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->kernel_, output);
  }

  // repeated .dsm.ShardInfo shards = 5;
  for (unsigned int i = 0, n = this->shards_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->shards(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.KernelDone)
}

::google::protobuf::uint8* KernelDone::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.KernelDone)
  // required .dsm.KernelRequest kernel = 1;
  if (has_kernel()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->kernel_, false, target);
  }

  // repeated .dsm.ShardInfo shards = 5;
  for (unsigned int i = 0, n = this->shards_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->shards(i), false, target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.KernelDone)
  return target;
}

int KernelDone::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.KernelDone)
  int total_size = 0;

  // required .dsm.KernelRequest kernel = 1;
  if (has_kernel()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->kernel_);
  }
  // repeated .dsm.ShardInfo shards = 5;
  total_size += 1 * this->shards_size();
  for (int i = 0; i < this->shards_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shards(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KernelDone::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.KernelDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KernelDone* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KernelDone>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.KernelDone)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.KernelDone)
    MergeFrom(*source);
  }
}

void KernelDone::MergeFrom(const KernelDone& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.KernelDone)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  shards_.MergeFrom(from.shards_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_kernel()) {
      mutable_kernel()->::dsm::KernelRequest::MergeFrom(from.kernel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KernelDone::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.KernelDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KernelDone::CopyFrom(const KernelDone& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.KernelDone)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KernelDone::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_kernel()) {
    if (!this->kernel_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->shards())) return false;
  return true;
}

void KernelDone::Swap(KernelDone* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KernelDone::InternalSwap(KernelDone* other) {
  std::swap(kernel_, other->kernel_);
  shards_.UnsafeArenaSwap(&other->shards_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KernelDone::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KernelDone_descriptor_;
  metadata.reflection = KernelDone_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KernelDone

// required .dsm.KernelRequest kernel = 1;
bool KernelDone::has_kernel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KernelDone::set_has_kernel() {
  _has_bits_[0] |= 0x00000001u;
}
void KernelDone::clear_has_kernel() {
  _has_bits_[0] &= ~0x00000001u;
}
void KernelDone::clear_kernel() {
  if (kernel_ != NULL) kernel_->::dsm::KernelRequest::Clear();
  clear_has_kernel();
}
const ::dsm::KernelRequest& KernelDone::kernel() const {
  // @@protoc_insertion_point(field_get:dsm.KernelDone.kernel)
  return kernel_ != NULL ? *kernel_ : *default_instance_->kernel_;
}
::dsm::KernelRequest* KernelDone::mutable_kernel() {
  set_has_kernel();
  if (kernel_ == NULL) {
    kernel_ = new ::dsm::KernelRequest;
  }
  // @@protoc_insertion_point(field_mutable:dsm.KernelDone.kernel)
  return kernel_;
}
::dsm::KernelRequest* KernelDone::release_kernel() {
  // @@protoc_insertion_point(field_release:dsm.KernelDone.kernel)
  clear_has_kernel();
  ::dsm::KernelRequest* temp = kernel_;
  kernel_ = NULL;
  return temp;
}
void KernelDone::set_allocated_kernel(::dsm::KernelRequest* kernel) {
  delete kernel_;
  kernel_ = kernel;
  if (kernel) {
    set_has_kernel();
  } else {
    clear_has_kernel();
  }
  // @@protoc_insertion_point(field_set_allocated:dsm.KernelDone.kernel)
}

// repeated .dsm.ShardInfo shards = 5;
int KernelDone::shards_size() const {
  return shards_.size();
}
void KernelDone::clear_shards() {
  shards_.Clear();
}
const ::dsm::ShardInfo& KernelDone::shards(int index) const {
  // @@protoc_insertion_point(field_get:dsm.KernelDone.shards)
  return shards_.Get(index);
}
::dsm::ShardInfo* KernelDone::mutable_shards(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.KernelDone.shards)
  return shards_.Mutable(index);
}
::dsm::ShardInfo* KernelDone::add_shards() {
  // @@protoc_insertion_point(field_add:dsm.KernelDone.shards)
  return shards_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::ShardInfo >*
KernelDone::mutable_shards() {
  // @@protoc_insertion_point(field_mutable_list:dsm.KernelDone.shards)
  return &shards_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::ShardInfo >&
KernelDone::shards() const {
  // @@protoc_insertion_point(field_list:dsm.KernelDone.shards)
  return shards_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IteratorRequest::kTableFieldNumber;
const int IteratorRequest::kShardFieldNumber;
const int IteratorRequest::kIdFieldNumber;
const int IteratorRequest::kRowCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IteratorRequest::IteratorRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.IteratorRequest)
}

void IteratorRequest::InitAsDefaultInstance() {
}

IteratorRequest::IteratorRequest(const IteratorRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.IteratorRequest)
}

void IteratorRequest::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  id_ = -1;
  row_count_ = 1u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IteratorRequest::~IteratorRequest() {
  // @@protoc_insertion_point(destructor:dsm.IteratorRequest)
  SharedDtor();
}

void IteratorRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IteratorRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IteratorRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IteratorRequest_descriptor_;
}

const IteratorRequest& IteratorRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

IteratorRequest* IteratorRequest::default_instance_ = NULL;

IteratorRequest* IteratorRequest::New(::google::protobuf::Arena* arena) const {
  IteratorRequest* n = new IteratorRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IteratorRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.IteratorRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IteratorRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IteratorRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(table_, shard_);
    id_ = -1;
    row_count_ = 1u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IteratorRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.IteratorRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required uint32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3 [default = -1];
      case 3: {
        if (tag == 24) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_row_count;
        break;
      }

      // optional uint32 row_count = 4 [default = 1];
      case 4: {
        if (tag == 32) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.IteratorRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.IteratorRequest)
  return false;
#undef DO_
}

void IteratorRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.IteratorRequest)
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }

  // optional int32 id = 3 [default = -1];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional uint32 row_count = 4 [default = 1];
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->row_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.IteratorRequest)
}

::google::protobuf::uint8* IteratorRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.IteratorRequest)
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }

  // optional int32 id = 3 [default = -1];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional uint32 row_count = 4 [default = 1];
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->row_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.IteratorRequest)
  return target;
}

int IteratorRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.IteratorRequest)
  int total_size = 0;

  if (has_table()) {
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());
  }

  if (has_shard()) {
    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());
  }

  return total_size;
}
int IteratorRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.IteratorRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());

    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional int32 id = 3 [default = -1];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 row_count = 4 [default = 1];
    if (has_row_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->row_count());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IteratorRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.IteratorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IteratorRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IteratorRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.IteratorRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.IteratorRequest)
    MergeFrom(*source);
  }
}

void IteratorRequest::MergeFrom(const IteratorRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.IteratorRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IteratorRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.IteratorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IteratorRequest::CopyFrom(const IteratorRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.IteratorRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IteratorRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void IteratorRequest::Swap(IteratorRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IteratorRequest::InternalSwap(IteratorRequest* other) {
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(id_, other->id_);
  std::swap(row_count_, other->row_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IteratorRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IteratorRequest_descriptor_;
  metadata.reflection = IteratorRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IteratorRequest

// required uint32 table = 1;
bool IteratorRequest::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IteratorRequest::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void IteratorRequest::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void IteratorRequest::clear_table() {
  table_ = 0u;
  clear_has_table();
}
 ::google::protobuf::uint32 IteratorRequest::table() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorRequest.table)
  return table_;
}
 void IteratorRequest::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorRequest.table)
}

// required uint32 shard = 2;
bool IteratorRequest::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IteratorRequest::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
void IteratorRequest::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
void IteratorRequest::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
 ::google::protobuf::uint32 IteratorRequest::shard() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorRequest.shard)
  return shard_;
}
 void IteratorRequest::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorRequest.shard)
}

// optional int32 id = 3 [default = -1];
bool IteratorRequest::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void IteratorRequest::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
void IteratorRequest::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
void IteratorRequest::clear_id() {
  id_ = -1;
  clear_has_id();
}
 ::google::protobuf::int32 IteratorRequest::id() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorRequest.id)
  return id_;
}
 void IteratorRequest::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorRequest.id)
}

// optional uint32 row_count = 4 [default = 1];
bool IteratorRequest::has_row_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void IteratorRequest::set_has_row_count() {
  _has_bits_[0] |= 0x00000008u;
}
void IteratorRequest::clear_has_row_count() {
  _has_bits_[0] &= ~0x00000008u;
}
void IteratorRequest::clear_row_count() {
  row_count_ = 1u;
  clear_has_row_count();
}
 ::google::protobuf::uint32 IteratorRequest::row_count() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorRequest.row_count)
  return row_count_;
}
 void IteratorRequest::set_row_count(::google::protobuf::uint32 value) {
  set_has_row_count();
  row_count_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorRequest.row_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int IteratorResponse::kIdFieldNumber;
const int IteratorResponse::kDoneFieldNumber;
const int IteratorResponse::kKeyFieldNumber;
const int IteratorResponse::kValueFieldNumber;
const int IteratorResponse::kRowCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

IteratorResponse::IteratorResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.IteratorResponse)
}

void IteratorResponse::InitAsDefaultInstance() {
}

IteratorResponse::IteratorResponse(const IteratorResponse& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.IteratorResponse)
}

void IteratorResponse::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0u;
  done_ = false;
  row_count_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IteratorResponse::~IteratorResponse() {
  // @@protoc_insertion_point(destructor:dsm.IteratorResponse)
  SharedDtor();
}

void IteratorResponse::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IteratorResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IteratorResponse::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IteratorResponse_descriptor_;
}

const IteratorResponse& IteratorResponse::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

IteratorResponse* IteratorResponse::default_instance_ = NULL;

IteratorResponse* IteratorResponse::New(::google::protobuf::Arena* arena) const {
  IteratorResponse* n = new IteratorResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void IteratorResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.IteratorResponse)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(IteratorResponse, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<IteratorResponse*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 19u) {
    ZR_(id_, done_);
    row_count_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  key_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool IteratorResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.IteratorResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_done;
        break;
      }

      // required bool done = 2;
      case 2: {
        if (tag == 16) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // repeated bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        if (input->ExpectTag(34)) goto parse_value;
        break;
      }

      // repeated bytes value = 4;
      case 4: {
        if (tag == 34) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_value()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_value;
        if (input->ExpectTag(40)) goto parse_row_count;
        break;
      }

      // required uint32 row_count = 5;
      case 5: {
        if (tag == 40) {
         parse_row_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &row_count_)));
          set_has_row_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.IteratorResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.IteratorResponse)
  return false;
#undef DO_
}

void IteratorResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.IteratorResponse)
  // required uint32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->id(), output);
  }

  // required bool done = 2;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->done(), output);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->key(i), output);
  }

  // repeated bytes value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->value(i), output);
  }

  // required uint32 row_count = 5;
  if (has_row_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->row_count(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.IteratorResponse)
}

::google::protobuf::uint8* IteratorResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.IteratorResponse)
  // required uint32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->id(), target);
  }

  // required bool done = 2;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->done(), target);
  }

  // repeated bytes key = 3;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(3, this->key(i), target);
  }

  // repeated bytes value = 4;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(4, this->value(i), target);
  }

  // required uint32 row_count = 5;
  if (has_row_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->row_count(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.IteratorResponse)
  return target;
}

int IteratorResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.IteratorResponse)
  int total_size = 0;

  if (has_id()) {
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());
  }

  if (has_done()) {
    // required bool done = 2;
    total_size += 1 + 1;
  }

  if (has_row_count()) {
    // required uint32 row_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->row_count());
  }

  return total_size;
}
int IteratorResponse::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.IteratorResponse)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000013) ^ 0x00000013) == 0) {  // All required fields are present.
    // required uint32 id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->id());

    // required bool done = 2;
    total_size += 1 + 1;

    // required uint32 row_count = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->row_count());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated bytes key = 3;
  total_size += 1 * this->key_size();
  for (int i = 0; i < this->key_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->key(i));
  }

  // repeated bytes value = 4;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->value(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IteratorResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.IteratorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const IteratorResponse* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const IteratorResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.IteratorResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.IteratorResponse)
    MergeFrom(*source);
  }
}

void IteratorResponse::MergeFrom(const IteratorResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.IteratorResponse)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  key_.MergeFrom(from.key_);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_row_count()) {
      set_row_count(from.row_count());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void IteratorResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.IteratorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IteratorResponse::CopyFrom(const IteratorResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.IteratorResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IteratorResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000013) != 0x00000013) return false;

  return true;
}

void IteratorResponse::Swap(IteratorResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void IteratorResponse::InternalSwap(IteratorResponse* other) {
  std::swap(id_, other->id_);
  std::swap(done_, other->done_);
  key_.UnsafeArenaSwap(&other->key_);
  value_.UnsafeArenaSwap(&other->value_);
  std::swap(row_count_, other->row_count_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata IteratorResponse::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IteratorResponse_descriptor_;
  metadata.reflection = IteratorResponse_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// IteratorResponse

// required uint32 id = 1;
bool IteratorResponse::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void IteratorResponse::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void IteratorResponse::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void IteratorResponse::clear_id() {
  id_ = 0u;
  clear_has_id();
}
 ::google::protobuf::uint32 IteratorResponse::id() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorResponse.id)
  return id_;
}
 void IteratorResponse::set_id(::google::protobuf::uint32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorResponse.id)
}

// required bool done = 2;
bool IteratorResponse::has_done() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void IteratorResponse::set_has_done() {
  _has_bits_[0] |= 0x00000002u;
}
void IteratorResponse::clear_has_done() {
  _has_bits_[0] &= ~0x00000002u;
}
void IteratorResponse::clear_done() {
  done_ = false;
  clear_has_done();
}
 bool IteratorResponse::done() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorResponse.done)
  return done_;
}
 void IteratorResponse::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorResponse.done)
}

// repeated bytes key = 3;
int IteratorResponse::key_size() const {
  return key_.size();
}
void IteratorResponse::clear_key() {
  key_.Clear();
}
 const ::std::string& IteratorResponse::key(int index) const {
  // @@protoc_insertion_point(field_get:dsm.IteratorResponse.key)
  return key_.Get(index);
}
 ::std::string* IteratorResponse::mutable_key(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.IteratorResponse.key)
  return key_.Mutable(index);
}
 void IteratorResponse::set_key(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dsm.IteratorResponse.key)
  key_.Mutable(index)->assign(value);
}
 void IteratorResponse::set_key(int index, const char* value) {
  key_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dsm.IteratorResponse.key)
}
 void IteratorResponse::set_key(int index, const void* value, size_t size) {
  key_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dsm.IteratorResponse.key)
}
 ::std::string* IteratorResponse::add_key() {
  // @@protoc_insertion_point(field_add_mutable:dsm.IteratorResponse.key)
  return key_.Add();
}
 void IteratorResponse::add_key(const ::std::string& value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dsm.IteratorResponse.key)
}
 void IteratorResponse::add_key(const char* value) {
  key_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dsm.IteratorResponse.key)
}
 void IteratorResponse::add_key(const void* value, size_t size) {
  key_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dsm.IteratorResponse.key)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
IteratorResponse::key() const {
  // @@protoc_insertion_point(field_list:dsm.IteratorResponse.key)
  return key_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
IteratorResponse::mutable_key() {
  // @@protoc_insertion_point(field_mutable_list:dsm.IteratorResponse.key)
  return &key_;
}

// repeated bytes value = 4;
int IteratorResponse::value_size() const {
  return value_.size();
}
void IteratorResponse::clear_value() {
  value_.Clear();
}
 const ::std::string& IteratorResponse::value(int index) const {
  // @@protoc_insertion_point(field_get:dsm.IteratorResponse.value)
  return value_.Get(index);
}
 ::std::string* IteratorResponse::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.IteratorResponse.value)
  return value_.Mutable(index);
}
 void IteratorResponse::set_value(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:dsm.IteratorResponse.value)
  value_.Mutable(index)->assign(value);
}
 void IteratorResponse::set_value(int index, const char* value) {
  value_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:dsm.IteratorResponse.value)
}
 void IteratorResponse::set_value(int index, const void* value, size_t size) {
  value_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:dsm.IteratorResponse.value)
}
 ::std::string* IteratorResponse::add_value() {
  // @@protoc_insertion_point(field_add_mutable:dsm.IteratorResponse.value)
  return value_.Add();
}
 void IteratorResponse::add_value(const ::std::string& value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:dsm.IteratorResponse.value)
}
 void IteratorResponse::add_value(const char* value) {
  value_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:dsm.IteratorResponse.value)
}
 void IteratorResponse::add_value(const void* value, size_t size) {
  value_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:dsm.IteratorResponse.value)
}
 const ::google::protobuf::RepeatedPtrField< ::std::string>&
IteratorResponse::value() const {
  // @@protoc_insertion_point(field_list:dsm.IteratorResponse.value)
  return value_;
}
 ::google::protobuf::RepeatedPtrField< ::std::string>*
IteratorResponse::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:dsm.IteratorResponse.value)
  return &value_;
}

// required uint32 row_count = 5;
bool IteratorResponse::has_row_count() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void IteratorResponse::set_has_row_count() {
  _has_bits_[0] |= 0x00000010u;
}
void IteratorResponse::clear_has_row_count() {
  _has_bits_[0] &= ~0x00000010u;
}
void IteratorResponse::clear_row_count() {
  row_count_ = 0u;
  clear_has_row_count();
}
 ::google::protobuf::uint32 IteratorResponse::row_count() const {
  // @@protoc_insertion_point(field_get:dsm.IteratorResponse.row_count)
  return row_count_;
}
 void IteratorResponse::set_row_count(::google::protobuf::uint32 value) {
  set_has_row_count();
  row_count_ = value;
  // @@protoc_insertion_point(field_set:dsm.IteratorResponse.row_count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HashGet::kTableFieldNumber;
const int HashGet::kShardFieldNumber;
const int HashGet::kKeyFieldNumber;
const int HashGet::kIndexFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HashGet::HashGet()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.HashGet)
}

void HashGet::InitAsDefaultInstance() {
}

HashGet::HashGet(const HashGet& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.HashGet)
}

void HashGet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  table_ = 0u;
  shard_ = 0u;
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  index_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HashGet::~HashGet() {
  // @@protoc_insertion_point(destructor:dsm.HashGet)
  SharedDtor();
}

void HashGet::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void HashGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HashGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HashGet_descriptor_;
}

const HashGet& HashGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

HashGet* HashGet::default_instance_ = NULL;

HashGet* HashGet::New(::google::protobuf::Arena* arena) const {
  HashGet* n = new HashGet;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HashGet::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.HashGet)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(HashGet, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<HashGet*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 15u) {
    ZR_(table_, shard_);
    if (has_key()) {
      key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    index_ = 0u;
  }

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool HashGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.HashGet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_shard;
        break;
      }

      // required uint32 shard = 2;
      case 2: {
        if (tag == 16) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_key;
        break;
      }

      // optional bytes key = 3;
      case 3: {
        if (tag == 26) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // optional uint32 index = 4;
      case 4: {
        if (tag == 32) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.HashGet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.HashGet)
  return false;
#undef DO_
}

void HashGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.HashGet)
  // required uint32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->table(), output);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->shard(), output);
  }

  // optional bytes key = 3;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->key(), output);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->index(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.HashGet)
}

::google::protobuf::uint8* HashGet::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.HashGet)
  // required uint32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->table(), target);
  }

  // required uint32 shard = 2;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->shard(), target);
  }

  // optional bytes key = 3;
  if (has_key()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->key(), target);
  }

  // optional uint32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->index(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.HashGet)
  return target;
}

int HashGet::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.HashGet)
  int total_size = 0;

  if (has_table()) {
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());
  }

  if (has_shard()) {
    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());
  }

  return total_size;
}
int HashGet::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.HashGet)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 table = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());

    // required uint32 shard = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional bytes key = 3;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->key());
    }

    // optional uint32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->index());
    }

  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HashGet::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.HashGet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const HashGet* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const HashGet>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.HashGet)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.HashGet)
    MergeFrom(*source);
  }
}

void HashGet::MergeFrom(const HashGet& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.HashGet)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_key()) {
      set_has_key();
      key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void HashGet::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.HashGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HashGet::CopyFrom(const HashGet& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.HashGet)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HashGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void HashGet::Swap(HashGet* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HashGet::InternalSwap(HashGet* other) {
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  key_.Swap(&other->key_);
  std::swap(index_, other->index_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata HashGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HashGet_descriptor_;
  metadata.reflection = HashGet_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HashGet

// required uint32 table = 1;
bool HashGet::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void HashGet::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void HashGet::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void HashGet::clear_table() {
  table_ = 0u;
  clear_has_table();
}
 ::google::protobuf::uint32 HashGet::table() const {
  // @@protoc_insertion_point(field_get:dsm.HashGet.table)
  return table_;
}
 void HashGet::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.HashGet.table)
}

// required uint32 shard = 2;
bool HashGet::has_shard() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void HashGet::set_has_shard() {
  _has_bits_[0] |= 0x00000002u;
}
void HashGet::clear_has_shard() {
  _has_bits_[0] &= ~0x00000002u;
}
void HashGet::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
 ::google::protobuf::uint32 HashGet::shard() const {
  // @@protoc_insertion_point(field_get:dsm.HashGet.shard)
  return shard_;
}
 void HashGet::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.HashGet.shard)
}

// optional bytes key = 3;
bool HashGet::has_key() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void HashGet::set_has_key() {
  _has_bits_[0] |= 0x00000004u;
}
void HashGet::clear_has_key() {
  _has_bits_[0] &= ~0x00000004u;
}
void HashGet::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_key();
}
 const ::std::string& HashGet::key() const {
  // @@protoc_insertion_point(field_get:dsm.HashGet.key)
  return key_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HashGet::set_key(const ::std::string& value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.HashGet.key)
}
 void HashGet::set_key(const char* value) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.HashGet.key)
}
 void HashGet::set_key(const void* value, size_t size) {
  set_has_key();
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.HashGet.key)
}
 ::std::string* HashGet::mutable_key() {
  set_has_key();
  // @@protoc_insertion_point(field_mutable:dsm.HashGet.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* HashGet::release_key() {
  // @@protoc_insertion_point(field_release:dsm.HashGet.key)
  clear_has_key();
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void HashGet::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    set_has_key();
  } else {
    clear_has_key();
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:dsm.HashGet.key)
}

// optional uint32 index = 4;
bool HashGet::has_index() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void HashGet::set_has_index() {
  _has_bits_[0] |= 0x00000008u;
}
void HashGet::clear_has_index() {
  _has_bits_[0] &= ~0x00000008u;
}
void HashGet::clear_index() {
  index_ = 0u;
  clear_has_index();
}
 ::google::protobuf::uint32 HashGet::index() const {
  // @@protoc_insertion_point(field_get:dsm.HashGet.index)
  return index_;
}
 void HashGet::set_index(::google::protobuf::uint32 value) {
  set_has_index();
  index_ = value;
  // @@protoc_insertion_point(field_set:dsm.HashGet.index)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TableData::kSourceFieldNumber;
const int TableData::kTableFieldNumber;
const int TableData::kShardFieldNumber;
const int TableData::kDoneFieldNumber;
const int TableData::kTableDataFieldNumber;
const int TableData::kRecDataFieldNumber;
const int TableData::kEpochFieldNumber;
const int TableData::kMarkerFieldNumber;
const int TableData::kMissingKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TableData::TableData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.TableData)
}

void TableData::InitAsDefaultInstance() {
}

TableData::TableData(const TableData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.TableData)
}

void TableData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = 0u;
  table_ = 0u;
  shard_ = 0u;
  done_ = false;
  table_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = 0;
  marker_ = -1;
  missing_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TableData::~TableData() {
  // @@protoc_insertion_point(destructor:dsm.TableData)
  SharedDtor();
}

void TableData::SharedDtor() {
  table_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void TableData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TableData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TableData_descriptor_;
}

const TableData& TableData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

TableData* TableData::default_instance_ = NULL;

TableData* TableData::New(::google::protobuf::Arena* arena) const {
  TableData* n = new TableData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TableData::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.TableData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TableData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TableData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(source_, table_);
    ZR_(shard_, done_);
    if (has_table_data()) {
      table_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    epoch_ = 0;
    marker_ = -1;
  }
  missing_key_ = false;

#undef ZR_HELPER_
#undef ZR_

  rec_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TableData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.TableData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }

      // required uint32 table = 2;
      case 2: {
        if (tag == 16) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shard;
        break;
      }

      // required uint32 shard = 3;
      case 3: {
        if (tag == 24) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }

      // required bool done = 4;
      case 4: {
        if (tag == 32) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_table_data;
        break;
      }

      // optional bytes table_data = 5;
      case 5: {
        if (tag == 42) {
         parse_table_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_rec_data;
        break;
      }

      // repeated .dsm.Record rec_data = 6;
      case 6: {
        if (tag == 50) {
         parse_rec_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_rec_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_rec_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_rec_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_epoch;
        break;
      }

      // optional int32 epoch = 11;
      case 11: {
        if (tag == 88) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_marker;
        break;
      }

      // optional int32 marker = 12 [default = -1];
      case 12: {
        if (tag == 96) {
         parse_marker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marker_)));
          set_has_marker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_missing_key;
        break;
      }

      // optional bool missing_key = 13;
      case 13: {
        if (tag == 104) {
         parse_missing_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_key_)));
          set_has_missing_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.TableData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.TableData)
  return false;
#undef DO_
}

void TableData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.TableData)
  // required uint32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // required uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }

  // required uint32 shard = 3;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard(), output);
  }

  // required bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }

  // optional bytes table_data = 5;
  if (has_table_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->table_data(), output);
  }

  // repeated .dsm.Record rec_data = 6;
  for (unsigned int i = 0, n = this->rec_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->rec_data(i), output);
  }

  // optional int32 epoch = 11;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->epoch(), output);
  }

  // optional int32 marker = 12 [default = -1];
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->marker(), output);
  }

  // optional bool missing_key = 13;
  if (has_missing_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->missing_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.TableData)
}

::google::protobuf::uint8* TableData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.TableData)
  // required uint32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // required uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }

  // required uint32 shard = 3;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard(), target);
  }

  // required bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }

  // optional bytes table_data = 5;
  if (has_table_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->table_data(), target);
  }

  // repeated .dsm.Record rec_data = 6;
  for (unsigned int i = 0, n = this->rec_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->rec_data(i), false, target);
  }

  // optional int32 epoch = 11;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->epoch(), target);
  }

  // optional int32 marker = 12 [default = -1];
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->marker(), target);
  }

  // optional bool missing_key = 13;
  if (has_missing_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->missing_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.TableData)
  return target;
}

int TableData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.TableData)
  int total_size = 0;

  if (has_source()) {
    // required uint32 source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  if (has_table()) {
    // required uint32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());
  }

  if (has_shard()) {
    // required uint32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());
  }

  if (has_done()) {
    // required bool done = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
int TableData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.TableData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());

    // required uint32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());

    // required uint32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());

    // required bool done = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 208u) {
    // optional bytes table_data = 5;
    if (has_table_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_data());
    }

    // optional int32 epoch = 11;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epoch());
    }

    // optional int32 marker = 12 [default = -1];
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marker());
    }

  }
  // optional bool missing_key = 13;
  if (has_missing_key()) {
    total_size += 1 + 1;
  }

  // repeated .dsm.Record rec_data = 6;
  total_size += 1 * this->rec_data_size();
  for (int i = 0; i < this->rec_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rec_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TableData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.TableData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TableData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TableData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.TableData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.TableData)
    MergeFrom(*source);
  }
}

void TableData::MergeFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.TableData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  rec_data_.MergeFrom(from.rec_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_table_data()) {
      set_has_table_data();
      table_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_data_);
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_marker()) {
      set_marker(from.marker());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_missing_key()) {
      set_missing_key(from.missing_key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TableData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.TableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TableData::CopyFrom(const TableData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.TableData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TableData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rec_data())) return false;
  return true;
}

void TableData::Swap(TableData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TableData::InternalSwap(TableData* other) {
  std::swap(source_, other->source_);
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(done_, other->done_);
  table_data_.Swap(&other->table_data_);
  rec_data_.UnsafeArenaSwap(&other->rec_data_);
  std::swap(epoch_, other->epoch_);
  std::swap(marker_, other->marker_);
  std::swap(missing_key_, other->missing_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TableData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TableData_descriptor_;
  metadata.reflection = TableData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TableData

// required uint32 source = 1;
bool TableData::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TableData::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void TableData::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void TableData::clear_source() {
  source_ = 0u;
  clear_has_source();
}
 ::google::protobuf::uint32 TableData::source() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.source)
  return source_;
}
 void TableData::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.source)
}

// required uint32 table = 2;
bool TableData::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TableData::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
void TableData::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
void TableData::clear_table() {
  table_ = 0u;
  clear_has_table();
}
 ::google::protobuf::uint32 TableData::table() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.table)
  return table_;
}
 void TableData::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.table)
}

// required uint32 shard = 3;
bool TableData::has_shard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TableData::set_has_shard() {
  _has_bits_[0] |= 0x00000004u;
}
void TableData::clear_has_shard() {
  _has_bits_[0] &= ~0x00000004u;
}
void TableData::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
 ::google::protobuf::uint32 TableData::shard() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.shard)
  return shard_;
}
 void TableData::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.shard)
}

// required bool done = 4;
bool TableData::has_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TableData::set_has_done() {
  _has_bits_[0] |= 0x00000008u;
}
void TableData::clear_has_done() {
  _has_bits_[0] &= ~0x00000008u;
}
void TableData::clear_done() {
  done_ = false;
  clear_has_done();
}
 bool TableData::done() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.done)
  return done_;
}
 void TableData::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.done)
}

// optional bytes table_data = 5;
bool TableData::has_table_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TableData::set_has_table_data() {
  _has_bits_[0] |= 0x00000010u;
}
void TableData::clear_has_table_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void TableData::clear_table_data() {
  table_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_data();
}
 const ::std::string& TableData::table_data() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.table_data)
  return table_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableData::set_table_data(const ::std::string& value) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.TableData.table_data)
}
 void TableData::set_table_data(const char* value) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.TableData.table_data)
}
 void TableData::set_table_data(const void* value, size_t size) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.TableData.table_data)
}
 ::std::string* TableData::mutable_table_data() {
  set_has_table_data();
  // @@protoc_insertion_point(field_mutable:dsm.TableData.table_data)
  return table_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* TableData::release_table_data() {
  // @@protoc_insertion_point(field_release:dsm.TableData.table_data)
  clear_has_table_data();
  return table_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void TableData::set_allocated_table_data(::std::string* table_data) {
  if (table_data != NULL) {
    set_has_table_data();
  } else {
    clear_has_table_data();
  }
  table_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_data);
  // @@protoc_insertion_point(field_set_allocated:dsm.TableData.table_data)
}

// repeated .dsm.Record rec_data = 6;
int TableData::rec_data_size() const {
  return rec_data_.size();
}
void TableData::clear_rec_data() {
  rec_data_.Clear();
}
const ::dsm::Record& TableData::rec_data(int index) const {
  // @@protoc_insertion_point(field_get:dsm.TableData.rec_data)
  return rec_data_.Get(index);
}
::dsm::Record* TableData::mutable_rec_data(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.TableData.rec_data)
  return rec_data_.Mutable(index);
}
::dsm::Record* TableData::add_rec_data() {
  // @@protoc_insertion_point(field_add:dsm.TableData.rec_data)
  return rec_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::Record >*
TableData::mutable_rec_data() {
  // @@protoc_insertion_point(field_mutable_list:dsm.TableData.rec_data)
  return &rec_data_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::Record >&
TableData::rec_data() const {
  // @@protoc_insertion_point(field_list:dsm.TableData.rec_data)
  return rec_data_;
}

// optional int32 epoch = 11;
bool TableData::has_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TableData::set_has_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
void TableData::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
void TableData::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
 ::google::protobuf::int32 TableData::epoch() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.epoch)
  return epoch_;
}
 void TableData::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.epoch)
}

// optional int32 marker = 12 [default = -1];
bool TableData::has_marker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TableData::set_has_marker() {
  _has_bits_[0] |= 0x00000080u;
}
void TableData::clear_has_marker() {
  _has_bits_[0] &= ~0x00000080u;
}
void TableData::clear_marker() {
  marker_ = -1;
  clear_has_marker();
}
 ::google::protobuf::int32 TableData::marker() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.marker)
  return marker_;
}
 void TableData::set_marker(::google::protobuf::int32 value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.marker)
}

// optional bool missing_key = 13;
bool TableData::has_missing_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TableData::set_has_missing_key() {
  _has_bits_[0] |= 0x00000100u;
}
void TableData::clear_has_missing_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void TableData::clear_missing_key() {
  missing_key_ = false;
  clear_has_missing_key();
}
 bool TableData::missing_key() const {
  // @@protoc_insertion_point(field_get:dsm.TableData.missing_key)
  return missing_key_;
}
 void TableData::set_missing_key(bool value) {
  set_has_missing_key();
  missing_key_ = value;
  // @@protoc_insertion_point(field_set:dsm.TableData.missing_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KVPairData::kSourceFieldNumber;
const int KVPairData::kTableFieldNumber;
const int KVPairData::kShardFieldNumber;
const int KVPairData::kDoneFieldNumber;
const int KVPairData::kTableDataFieldNumber;
const int KVPairData::kKvDataFieldNumber;
const int KVPairData::kEpochFieldNumber;
const int KVPairData::kMarkerFieldNumber;
const int KVPairData::kMissingKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KVPairData::KVPairData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.KVPairData)
}

void KVPairData::InitAsDefaultInstance() {
}

KVPairData::KVPairData(const KVPairData& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.KVPairData)
}

void KVPairData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  source_ = 0u;
  table_ = 0u;
  shard_ = 0u;
  done_ = false;
  table_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  epoch_ = 0;
  marker_ = -1;
  missing_key_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KVPairData::~KVPairData() {
  // @@protoc_insertion_point(destructor:dsm.KVPairData)
  SharedDtor();
}

void KVPairData::SharedDtor() {
  table_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void KVPairData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KVPairData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KVPairData_descriptor_;
}

const KVPairData& KVPairData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

KVPairData* KVPairData::default_instance_ = NULL;

KVPairData* KVPairData::New(::google::protobuf::Arena* arena) const {
  KVPairData* n = new KVPairData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KVPairData::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.KVPairData)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(KVPairData, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<KVPairData*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 223u) {
    ZR_(source_, table_);
    ZR_(shard_, done_);
    if (has_table_data()) {
      table_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    epoch_ = 0;
    marker_ = -1;
  }
  missing_key_ = false;

#undef ZR_HELPER_
#undef ZR_

  kv_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool KVPairData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.KVPairData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 source = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &source_)));
          set_has_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }

      // required uint32 table = 2;
      case 2: {
        if (tag == 16) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_shard;
        break;
      }

      // required uint32 shard = 3;
      case 3: {
        if (tag == 24) {
         parse_shard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &shard_)));
          set_has_shard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_done;
        break;
      }

      // required bool done = 4;
      case 4: {
        if (tag == 32) {
         parse_done:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &done_)));
          set_has_done();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_table_data;
        break;
      }

      // optional bytes table_data = 5;
      case 5: {
        if (tag == 42) {
         parse_table_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_table_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_kv_data;
        break;
      }

      // repeated .dsm.Arg kv_data = 6;
      case 6: {
        if (tag == 50) {
         parse_kv_data:
          DO_(input->IncrementRecursionDepth());
         parse_loop_kv_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_kv_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_loop_kv_data;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectTag(88)) goto parse_epoch;
        break;
      }

      // optional int32 epoch = 11;
      case 11: {
        if (tag == 88) {
         parse_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_marker;
        break;
      }

      // optional int32 marker = 12 [default = -1];
      case 12: {
        if (tag == 96) {
         parse_marker:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &marker_)));
          set_has_marker();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_missing_key;
        break;
      }

      // optional bool missing_key = 13;
      case 13: {
        if (tag == 104) {
         parse_missing_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &missing_key_)));
          set_has_missing_key();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.KVPairData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.KVPairData)
  return false;
#undef DO_
}

void KVPairData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.KVPairData)
  // required uint32 source = 1;
  if (has_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->source(), output);
  }

  // required uint32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->table(), output);
  }

  // required uint32 shard = 3;
  if (has_shard()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->shard(), output);
  }

  // required bool done = 4;
  if (has_done()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->done(), output);
  }

  // optional bytes table_data = 5;
  if (has_table_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->table_data(), output);
  }

  // repeated .dsm.Arg kv_data = 6;
  for (unsigned int i = 0, n = this->kv_data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->kv_data(i), output);
  }

  // optional int32 epoch = 11;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->epoch(), output);
  }

  // optional int32 marker = 12 [default = -1];
  if (has_marker()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->marker(), output);
  }

  // optional bool missing_key = 13;
  if (has_missing_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->missing_key(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.KVPairData)
}

::google::protobuf::uint8* KVPairData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.KVPairData)
  // required uint32 source = 1;
  if (has_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->source(), target);
  }

  // required uint32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->table(), target);
  }

  // required uint32 shard = 3;
  if (has_shard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->shard(), target);
  }

  // required bool done = 4;
  if (has_done()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->done(), target);
  }

  // optional bytes table_data = 5;
  if (has_table_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->table_data(), target);
  }

  // repeated .dsm.Arg kv_data = 6;
  for (unsigned int i = 0, n = this->kv_data_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        6, this->kv_data(i), false, target);
  }

  // optional int32 epoch = 11;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->epoch(), target);
  }

  // optional int32 marker = 12 [default = -1];
  if (has_marker()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->marker(), target);
  }

  // optional bool missing_key = 13;
  if (has_missing_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->missing_key(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.KVPairData)
  return target;
}

int KVPairData::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.KVPairData)
  int total_size = 0;

  if (has_source()) {
    // required uint32 source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());
  }

  if (has_table()) {
    // required uint32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());
  }

  if (has_shard()) {
    // required uint32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());
  }

  if (has_done()) {
    // required bool done = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
int KVPairData::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.KVPairData)
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required uint32 source = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->source());

    // required uint32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->table());

    // required uint32 shard = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->shard());

    // required bool done = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[4 / 32] & 208u) {
    // optional bytes table_data = 5;
    if (has_table_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->table_data());
    }

    // optional int32 epoch = 11;
    if (has_epoch()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->epoch());
    }

    // optional int32 marker = 12 [default = -1];
    if (has_marker()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->marker());
    }

  }
  // optional bool missing_key = 13;
  if (has_missing_key()) {
    total_size += 1 + 1;
  }

  // repeated .dsm.Arg kv_data = 6;
  total_size += 1 * this->kv_data_size();
  for (int i = 0; i < this->kv_data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kv_data(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KVPairData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.KVPairData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const KVPairData* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const KVPairData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.KVPairData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.KVPairData)
    MergeFrom(*source);
  }
}

void KVPairData::MergeFrom(const KVPairData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.KVPairData)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  kv_data_.MergeFrom(from.kv_data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_shard()) {
      set_shard(from.shard());
    }
    if (from.has_done()) {
      set_done(from.done());
    }
    if (from.has_table_data()) {
      set_has_table_data();
      table_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.table_data_);
    }
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_marker()) {
      set_marker(from.marker());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_missing_key()) {
      set_missing_key(from.missing_key());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void KVPairData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.KVPairData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KVPairData::CopyFrom(const KVPairData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.KVPairData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KVPairData::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->kv_data())) return false;
  return true;
}

void KVPairData::Swap(KVPairData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KVPairData::InternalSwap(KVPairData* other) {
  std::swap(source_, other->source_);
  std::swap(table_, other->table_);
  std::swap(shard_, other->shard_);
  std::swap(done_, other->done_);
  table_data_.Swap(&other->table_data_);
  kv_data_.UnsafeArenaSwap(&other->kv_data_);
  std::swap(epoch_, other->epoch_);
  std::swap(marker_, other->marker_);
  std::swap(missing_key_, other->missing_key_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata KVPairData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KVPairData_descriptor_;
  metadata.reflection = KVPairData_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KVPairData

// required uint32 source = 1;
bool KVPairData::has_source() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void KVPairData::set_has_source() {
  _has_bits_[0] |= 0x00000001u;
}
void KVPairData::clear_has_source() {
  _has_bits_[0] &= ~0x00000001u;
}
void KVPairData::clear_source() {
  source_ = 0u;
  clear_has_source();
}
 ::google::protobuf::uint32 KVPairData::source() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.source)
  return source_;
}
 void KVPairData::set_source(::google::protobuf::uint32 value) {
  set_has_source();
  source_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.source)
}

// required uint32 table = 2;
bool KVPairData::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void KVPairData::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
void KVPairData::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
void KVPairData::clear_table() {
  table_ = 0u;
  clear_has_table();
}
 ::google::protobuf::uint32 KVPairData::table() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.table)
  return table_;
}
 void KVPairData::set_table(::google::protobuf::uint32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.table)
}

// required uint32 shard = 3;
bool KVPairData::has_shard() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void KVPairData::set_has_shard() {
  _has_bits_[0] |= 0x00000004u;
}
void KVPairData::clear_has_shard() {
  _has_bits_[0] &= ~0x00000004u;
}
void KVPairData::clear_shard() {
  shard_ = 0u;
  clear_has_shard();
}
 ::google::protobuf::uint32 KVPairData::shard() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.shard)
  return shard_;
}
 void KVPairData::set_shard(::google::protobuf::uint32 value) {
  set_has_shard();
  shard_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.shard)
}

// required bool done = 4;
bool KVPairData::has_done() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void KVPairData::set_has_done() {
  _has_bits_[0] |= 0x00000008u;
}
void KVPairData::clear_has_done() {
  _has_bits_[0] &= ~0x00000008u;
}
void KVPairData::clear_done() {
  done_ = false;
  clear_has_done();
}
 bool KVPairData::done() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.done)
  return done_;
}
 void KVPairData::set_done(bool value) {
  set_has_done();
  done_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.done)
}

// optional bytes table_data = 5;
bool KVPairData::has_table_data() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void KVPairData::set_has_table_data() {
  _has_bits_[0] |= 0x00000010u;
}
void KVPairData::clear_has_table_data() {
  _has_bits_[0] &= ~0x00000010u;
}
void KVPairData::clear_table_data() {
  table_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_table_data();
}
 const ::std::string& KVPairData::table_data() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.table_data)
  return table_data_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPairData::set_table_data(const ::std::string& value) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:dsm.KVPairData.table_data)
}
 void KVPairData::set_table_data(const char* value) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:dsm.KVPairData.table_data)
}
 void KVPairData::set_table_data(const void* value, size_t size) {
  set_has_table_data();
  table_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:dsm.KVPairData.table_data)
}
 ::std::string* KVPairData::mutable_table_data() {
  set_has_table_data();
  // @@protoc_insertion_point(field_mutable:dsm.KVPairData.table_data)
  return table_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* KVPairData::release_table_data() {
  // @@protoc_insertion_point(field_release:dsm.KVPairData.table_data)
  clear_has_table_data();
  return table_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void KVPairData::set_allocated_table_data(::std::string* table_data) {
  if (table_data != NULL) {
    set_has_table_data();
  } else {
    clear_has_table_data();
  }
  table_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), table_data);
  // @@protoc_insertion_point(field_set_allocated:dsm.KVPairData.table_data)
}

// repeated .dsm.Arg kv_data = 6;
int KVPairData::kv_data_size() const {
  return kv_data_.size();
}
void KVPairData::clear_kv_data() {
  kv_data_.Clear();
}
const ::dsm::Arg& KVPairData::kv_data(int index) const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.kv_data)
  return kv_data_.Get(index);
}
::dsm::Arg* KVPairData::mutable_kv_data(int index) {
  // @@protoc_insertion_point(field_mutable:dsm.KVPairData.kv_data)
  return kv_data_.Mutable(index);
}
::dsm::Arg* KVPairData::add_kv_data() {
  // @@protoc_insertion_point(field_add:dsm.KVPairData.kv_data)
  return kv_data_.Add();
}
::google::protobuf::RepeatedPtrField< ::dsm::Arg >*
KVPairData::mutable_kv_data() {
  // @@protoc_insertion_point(field_mutable_list:dsm.KVPairData.kv_data)
  return &kv_data_;
}
const ::google::protobuf::RepeatedPtrField< ::dsm::Arg >&
KVPairData::kv_data() const {
  // @@protoc_insertion_point(field_list:dsm.KVPairData.kv_data)
  return kv_data_;
}

// optional int32 epoch = 11;
bool KVPairData::has_epoch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void KVPairData::set_has_epoch() {
  _has_bits_[0] |= 0x00000040u;
}
void KVPairData::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000040u;
}
void KVPairData::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
 ::google::protobuf::int32 KVPairData::epoch() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.epoch)
  return epoch_;
}
 void KVPairData::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.epoch)
}

// optional int32 marker = 12 [default = -1];
bool KVPairData::has_marker() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void KVPairData::set_has_marker() {
  _has_bits_[0] |= 0x00000080u;
}
void KVPairData::clear_has_marker() {
  _has_bits_[0] &= ~0x00000080u;
}
void KVPairData::clear_marker() {
  marker_ = -1;
  clear_has_marker();
}
 ::google::protobuf::int32 KVPairData::marker() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.marker)
  return marker_;
}
 void KVPairData::set_marker(::google::protobuf::int32 value) {
  set_has_marker();
  marker_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.marker)
}

// optional bool missing_key = 13;
bool KVPairData::has_missing_key() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void KVPairData::set_has_missing_key() {
  _has_bits_[0] |= 0x00000100u;
}
void KVPairData::clear_has_missing_key() {
  _has_bits_[0] &= ~0x00000100u;
}
void KVPairData::clear_missing_key() {
  missing_key_ = false;
  clear_has_missing_key();
}
 bool KVPairData::missing_key() const {
  // @@protoc_insertion_point(field_get:dsm.KVPairData.missing_key)
  return missing_key_;
}
 void KVPairData::set_missing_key(bool value) {
  set_has_missing_key();
  missing_key_ = value;
  // @@protoc_insertion_point(field_set:dsm.KVPairData.missing_key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckpointRequest::kEpochFieldNumber;
const int CheckpointRequest::kCheckpointTypeFieldNumber;
const int CheckpointRequest::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckpointRequest::CheckpointRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.CheckpointRequest)
}

void CheckpointRequest::InitAsDefaultInstance() {
}

CheckpointRequest::CheckpointRequest(const CheckpointRequest& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.CheckpointRequest)
}

void CheckpointRequest::SharedCtor() {
  _cached_size_ = 0;
  epoch_ = 0;
  checkpoint_type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckpointRequest::~CheckpointRequest() {
  // @@protoc_insertion_point(destructor:dsm.CheckpointRequest)
  SharedDtor();
}

void CheckpointRequest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckpointRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckpointRequest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckpointRequest_descriptor_;
}

const CheckpointRequest& CheckpointRequest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

CheckpointRequest* CheckpointRequest::default_instance_ = NULL;

CheckpointRequest* CheckpointRequest::New(::google::protobuf::Arena* arena) const {
  CheckpointRequest* n = new CheckpointRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckpointRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.CheckpointRequest)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckpointRequest, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckpointRequest*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(epoch_, checkpoint_type_);

#undef ZR_HELPER_
#undef ZR_

  table_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CheckpointRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.CheckpointRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_checkpoint_type;
        break;
      }

      // required int32 checkpoint_type = 2;
      case 2: {
        if (tag == 16) {
         parse_checkpoint_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_type_)));
          set_has_checkpoint_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_table;
        break;
      }

      // repeated int32 table = 3;
      case 3: {
        if (tag == 24) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_table())));
        } else if (tag == 26) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_table())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_table;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.CheckpointRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.CheckpointRequest)
  return false;
#undef DO_
}

void CheckpointRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.CheckpointRequest)
  // required int32 epoch = 1;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->epoch(), output);
  }

  // required int32 checkpoint_type = 2;
  if (has_checkpoint_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->checkpoint_type(), output);
  }

  // repeated int32 table = 3;
  for (int i = 0; i < this->table_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->table(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.CheckpointRequest)
}

::google::protobuf::uint8* CheckpointRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.CheckpointRequest)
  // required int32 epoch = 1;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->epoch(), target);
  }

  // required int32 checkpoint_type = 2;
  if (has_checkpoint_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->checkpoint_type(), target);
  }

  // repeated int32 table = 3;
  for (int i = 0; i < this->table_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->table(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.CheckpointRequest)
  return target;
}

int CheckpointRequest::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.CheckpointRequest)
  int total_size = 0;

  if (has_epoch()) {
    // required int32 epoch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch());
  }

  if (has_checkpoint_type()) {
    // required int32 checkpoint_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_type());
  }

  return total_size;
}
int CheckpointRequest::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.CheckpointRequest)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 epoch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch());

    // required int32 checkpoint_type = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // repeated int32 table = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->table_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->table(i));
    }
    total_size += 1 * this->table_size() + data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckpointRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.CheckpointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckpointRequest* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckpointRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.CheckpointRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.CheckpointRequest)
    MergeFrom(*source);
  }
}

void CheckpointRequest::MergeFrom(const CheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.CheckpointRequest)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  table_.MergeFrom(from.table_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
    if (from.has_checkpoint_type()) {
      set_checkpoint_type(from.checkpoint_type());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CheckpointRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.CheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointRequest::CopyFrom(const CheckpointRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.CheckpointRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointRequest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckpointRequest::Swap(CheckpointRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckpointRequest::InternalSwap(CheckpointRequest* other) {
  std::swap(epoch_, other->epoch_);
  std::swap(checkpoint_type_, other->checkpoint_type_);
  table_.UnsafeArenaSwap(&other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckpointRequest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckpointRequest_descriptor_;
  metadata.reflection = CheckpointRequest_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckpointRequest

// required int32 epoch = 1;
bool CheckpointRequest::has_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckpointRequest::set_has_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckpointRequest::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckpointRequest::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
 ::google::protobuf::int32 CheckpointRequest::epoch() const {
  // @@protoc_insertion_point(field_get:dsm.CheckpointRequest.epoch)
  return epoch_;
}
 void CheckpointRequest::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.CheckpointRequest.epoch)
}

// required int32 checkpoint_type = 2;
bool CheckpointRequest::has_checkpoint_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckpointRequest::set_has_checkpoint_type() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckpointRequest::clear_has_checkpoint_type() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckpointRequest::clear_checkpoint_type() {
  checkpoint_type_ = 0;
  clear_has_checkpoint_type();
}
 ::google::protobuf::int32 CheckpointRequest::checkpoint_type() const {
  // @@protoc_insertion_point(field_get:dsm.CheckpointRequest.checkpoint_type)
  return checkpoint_type_;
}
 void CheckpointRequest::set_checkpoint_type(::google::protobuf::int32 value) {
  set_has_checkpoint_type();
  checkpoint_type_ = value;
  // @@protoc_insertion_point(field_set:dsm.CheckpointRequest.checkpoint_type)
}

// repeated int32 table = 3;
int CheckpointRequest::table_size() const {
  return table_.size();
}
void CheckpointRequest::clear_table() {
  table_.Clear();
}
 ::google::protobuf::int32 CheckpointRequest::table(int index) const {
  // @@protoc_insertion_point(field_get:dsm.CheckpointRequest.table)
  return table_.Get(index);
}
 void CheckpointRequest::set_table(int index, ::google::protobuf::int32 value) {
  table_.Set(index, value);
  // @@protoc_insertion_point(field_set:dsm.CheckpointRequest.table)
}
 void CheckpointRequest::add_table(::google::protobuf::int32 value) {
  table_.Add(value);
  // @@protoc_insertion_point(field_add:dsm.CheckpointRequest.table)
}
 const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
CheckpointRequest::table() const {
  // @@protoc_insertion_point(field_list:dsm.CheckpointRequest.table)
  return table_;
}
 ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
CheckpointRequest::mutable_table() {
  // @@protoc_insertion_point(field_mutable_list:dsm.CheckpointRequest.table)
  return &table_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TerminationNotification::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TerminationNotification::TerminationNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.TerminationNotification)
}

void TerminationNotification::InitAsDefaultInstance() {
}

TerminationNotification::TerminationNotification(const TerminationNotification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.TerminationNotification)
}

void TerminationNotification::SharedCtor() {
  _cached_size_ = 0;
  epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TerminationNotification::~TerminationNotification() {
  // @@protoc_insertion_point(destructor:dsm.TerminationNotification)
  SharedDtor();
}

void TerminationNotification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TerminationNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TerminationNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TerminationNotification_descriptor_;
}

const TerminationNotification& TerminationNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

TerminationNotification* TerminationNotification::default_instance_ = NULL;

TerminationNotification* TerminationNotification::New(::google::protobuf::Arena* arena) const {
  TerminationNotification* n = new TerminationNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TerminationNotification::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.TerminationNotification)
  epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TerminationNotification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.TerminationNotification)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.TerminationNotification)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.TerminationNotification)
  return false;
#undef DO_
}

void TerminationNotification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.TerminationNotification)
  // required int32 epoch = 1;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.TerminationNotification)
}

::google::protobuf::uint8* TerminationNotification::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.TerminationNotification)
  // required int32 epoch = 1;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.TerminationNotification)
  return target;
}

int TerminationNotification::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.TerminationNotification)
  int total_size = 0;

  // required int32 epoch = 1;
  if (has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TerminationNotification::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.TerminationNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const TerminationNotification* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const TerminationNotification>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.TerminationNotification)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.TerminationNotification)
    MergeFrom(*source);
  }
}

void TerminationNotification::MergeFrom(const TerminationNotification& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.TerminationNotification)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void TerminationNotification::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.TerminationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TerminationNotification::CopyFrom(const TerminationNotification& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.TerminationNotification)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TerminationNotification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TerminationNotification::Swap(TerminationNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TerminationNotification::InternalSwap(TerminationNotification* other) {
  std::swap(epoch_, other->epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TerminationNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TerminationNotification_descriptor_;
  metadata.reflection = TerminationNotification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TerminationNotification

// required int32 epoch = 1;
bool TerminationNotification::has_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TerminationNotification::set_has_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
void TerminationNotification::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
void TerminationNotification::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
 ::google::protobuf::int32 TerminationNotification::epoch() const {
  // @@protoc_insertion_point(field_get:dsm.TerminationNotification.epoch)
  return epoch_;
}
 void TerminationNotification::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.TerminationNotification.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int StartRestore::kEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

StartRestore::StartRestore()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.StartRestore)
}

void StartRestore::InitAsDefaultInstance() {
}

StartRestore::StartRestore(const StartRestore& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.StartRestore)
}

void StartRestore::SharedCtor() {
  _cached_size_ = 0;
  epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartRestore::~StartRestore() {
  // @@protoc_insertion_point(destructor:dsm.StartRestore)
  SharedDtor();
}

void StartRestore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartRestore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartRestore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartRestore_descriptor_;
}

const StartRestore& StartRestore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

StartRestore* StartRestore::default_instance_ = NULL;

StartRestore* StartRestore::New(::google::protobuf::Arena* arena) const {
  StartRestore* n = new StartRestore;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void StartRestore::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.StartRestore)
  epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool StartRestore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.StartRestore)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &epoch_)));
          set_has_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.StartRestore)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.StartRestore)
  return false;
#undef DO_
}

void StartRestore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.StartRestore)
  // required int32 epoch = 1;
  if (has_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.StartRestore)
}

::google::protobuf::uint8* StartRestore::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.StartRestore)
  // required int32 epoch = 1;
  if (has_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.StartRestore)
  return target;
}

int StartRestore::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.StartRestore)
  int total_size = 0;

  // required int32 epoch = 1;
  if (has_epoch()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->epoch());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartRestore::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.StartRestore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const StartRestore* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const StartRestore>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.StartRestore)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.StartRestore)
    MergeFrom(*source);
  }
}

void StartRestore::MergeFrom(const StartRestore& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.StartRestore)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_epoch()) {
      set_epoch(from.epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void StartRestore::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.StartRestore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartRestore::CopyFrom(const StartRestore& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.StartRestore)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartRestore::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StartRestore::Swap(StartRestore* other) {
  if (other == this) return;
  InternalSwap(other);
}
void StartRestore::InternalSwap(StartRestore* other) {
  std::swap(epoch_, other->epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata StartRestore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartRestore_descriptor_;
  metadata.reflection = StartRestore_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// StartRestore

// required int32 epoch = 1;
bool StartRestore::has_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void StartRestore::set_has_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
void StartRestore::clear_has_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
void StartRestore::clear_epoch() {
  epoch_ = 0;
  clear_has_epoch();
}
 ::google::protobuf::int32 StartRestore::epoch() const {
  // @@protoc_insertion_point(field_get:dsm.StartRestore.epoch)
  return epoch_;
}
 void StartRestore::set_epoch(::google::protobuf::int32 value) {
  set_has_epoch();
  epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.StartRestore.epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CheckpointInfo::kCheckpointEpochFieldNumber;
const int CheckpointInfo::kKernelEpochFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CheckpointInfo::CheckpointInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.CheckpointInfo)
}

void CheckpointInfo::InitAsDefaultInstance() {
}

CheckpointInfo::CheckpointInfo(const CheckpointInfo& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.CheckpointInfo)
}

void CheckpointInfo::SharedCtor() {
  _cached_size_ = 0;
  checkpoint_epoch_ = 0;
  kernel_epoch_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CheckpointInfo::~CheckpointInfo() {
  // @@protoc_insertion_point(destructor:dsm.CheckpointInfo)
  SharedDtor();
}

void CheckpointInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CheckpointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CheckpointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CheckpointInfo_descriptor_;
}

const CheckpointInfo& CheckpointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

CheckpointInfo* CheckpointInfo::default_instance_ = NULL;

CheckpointInfo* CheckpointInfo::New(::google::protobuf::Arena* arena) const {
  CheckpointInfo* n = new CheckpointInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CheckpointInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.CheckpointInfo)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(CheckpointInfo, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<CheckpointInfo*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(checkpoint_epoch_, kernel_epoch_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CheckpointInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.CheckpointInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 checkpoint_epoch = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &checkpoint_epoch_)));
          set_has_checkpoint_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_kernel_epoch;
        break;
      }

      // required int32 kernel_epoch = 2;
      case 2: {
        if (tag == 16) {
         parse_kernel_epoch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kernel_epoch_)));
          set_has_kernel_epoch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.CheckpointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.CheckpointInfo)
  return false;
#undef DO_
}

void CheckpointInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.CheckpointInfo)
  // required int32 checkpoint_epoch = 1;
  if (has_checkpoint_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->checkpoint_epoch(), output);
  }

  // required int32 kernel_epoch = 2;
  if (has_kernel_epoch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kernel_epoch(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.CheckpointInfo)
}

::google::protobuf::uint8* CheckpointInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.CheckpointInfo)
  // required int32 checkpoint_epoch = 1;
  if (has_checkpoint_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->checkpoint_epoch(), target);
  }

  // required int32 kernel_epoch = 2;
  if (has_kernel_epoch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kernel_epoch(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.CheckpointInfo)
  return target;
}

int CheckpointInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.CheckpointInfo)
  int total_size = 0;

  if (has_checkpoint_epoch()) {
    // required int32 checkpoint_epoch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_epoch());
  }

  if (has_kernel_epoch()) {
    // required int32 kernel_epoch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kernel_epoch());
  }

  return total_size;
}
int CheckpointInfo::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.CheckpointInfo)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 checkpoint_epoch = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->checkpoint_epoch());

    // required int32 kernel_epoch = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->kernel_epoch());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CheckpointInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.CheckpointInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const CheckpointInfo* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CheckpointInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.CheckpointInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.CheckpointInfo)
    MergeFrom(*source);
  }
}

void CheckpointInfo::MergeFrom(const CheckpointInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.CheckpointInfo)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_checkpoint_epoch()) {
      set_checkpoint_epoch(from.checkpoint_epoch());
    }
    if (from.has_kernel_epoch()) {
      set_kernel_epoch(from.kernel_epoch());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CheckpointInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.CheckpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CheckpointInfo::CopyFrom(const CheckpointInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.CheckpointInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CheckpointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CheckpointInfo::Swap(CheckpointInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CheckpointInfo::InternalSwap(CheckpointInfo* other) {
  std::swap(checkpoint_epoch_, other->checkpoint_epoch_);
  std::swap(kernel_epoch_, other->kernel_epoch_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CheckpointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CheckpointInfo_descriptor_;
  metadata.reflection = CheckpointInfo_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CheckpointInfo

// required int32 checkpoint_epoch = 1;
bool CheckpointInfo::has_checkpoint_epoch() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CheckpointInfo::set_has_checkpoint_epoch() {
  _has_bits_[0] |= 0x00000001u;
}
void CheckpointInfo::clear_has_checkpoint_epoch() {
  _has_bits_[0] &= ~0x00000001u;
}
void CheckpointInfo::clear_checkpoint_epoch() {
  checkpoint_epoch_ = 0;
  clear_has_checkpoint_epoch();
}
 ::google::protobuf::int32 CheckpointInfo::checkpoint_epoch() const {
  // @@protoc_insertion_point(field_get:dsm.CheckpointInfo.checkpoint_epoch)
  return checkpoint_epoch_;
}
 void CheckpointInfo::set_checkpoint_epoch(::google::protobuf::int32 value) {
  set_has_checkpoint_epoch();
  checkpoint_epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.CheckpointInfo.checkpoint_epoch)
}

// required int32 kernel_epoch = 2;
bool CheckpointInfo::has_kernel_epoch() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CheckpointInfo::set_has_kernel_epoch() {
  _has_bits_[0] |= 0x00000002u;
}
void CheckpointInfo::clear_has_kernel_epoch() {
  _has_bits_[0] &= ~0x00000002u;
}
void CheckpointInfo::clear_kernel_epoch() {
  kernel_epoch_ = 0;
  clear_has_kernel_epoch();
}
 ::google::protobuf::int32 CheckpointInfo::kernel_epoch() const {
  // @@protoc_insertion_point(field_get:dsm.CheckpointInfo.kernel_epoch)
  return kernel_epoch_;
}
 void CheckpointInfo::set_kernel_epoch(::google::protobuf::int32 value) {
  set_has_kernel_epoch();
  kernel_epoch_ = value;
  // @@protoc_insertion_point(field_set:dsm.CheckpointInfo.kernel_epoch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SwapTable::kTableAFieldNumber;
const int SwapTable::kTableBFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SwapTable::SwapTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.SwapTable)
}

void SwapTable::InitAsDefaultInstance() {
}

SwapTable::SwapTable(const SwapTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.SwapTable)
}

void SwapTable::SharedCtor() {
  _cached_size_ = 0;
  table_a_ = 0;
  table_b_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SwapTable::~SwapTable() {
  // @@protoc_insertion_point(destructor:dsm.SwapTable)
  SharedDtor();
}

void SwapTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SwapTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SwapTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SwapTable_descriptor_;
}

const SwapTable& SwapTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

SwapTable* SwapTable::default_instance_ = NULL;

SwapTable* SwapTable::New(::google::protobuf::Arena* arena) const {
  SwapTable* n = new SwapTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SwapTable::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.SwapTable)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(SwapTable, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<SwapTable*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(table_a_, table_b_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool SwapTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.SwapTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table_a = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_a_)));
          set_has_table_a();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table_b;
        break;
      }

      // required int32 table_b = 2;
      case 2: {
        if (tag == 16) {
         parse_table_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_b_)));
          set_has_table_b();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.SwapTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.SwapTable)
  return false;
#undef DO_
}

void SwapTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.SwapTable)
  // required int32 table_a = 1;
  if (has_table_a()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table_a(), output);
  }

  // required int32 table_b = 2;
  if (has_table_b()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table_b(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.SwapTable)
}

::google::protobuf::uint8* SwapTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.SwapTable)
  // required int32 table_a = 1;
  if (has_table_a()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table_a(), target);
  }

  // required int32 table_b = 2;
  if (has_table_b()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table_b(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.SwapTable)
  return target;
}

int SwapTable::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.SwapTable)
  int total_size = 0;

  if (has_table_a()) {
    // required int32 table_a = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_a());
  }

  if (has_table_b()) {
    // required int32 table_b = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_b());
  }

  return total_size;
}
int SwapTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.SwapTable)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required int32 table_a = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_a());

    // required int32 table_b = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table_b());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SwapTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.SwapTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const SwapTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const SwapTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.SwapTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.SwapTable)
    MergeFrom(*source);
  }
}

void SwapTable::MergeFrom(const SwapTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.SwapTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table_a()) {
      set_table_a(from.table_a());
    }
    if (from.has_table_b()) {
      set_table_b(from.table_b());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void SwapTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.SwapTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SwapTable::CopyFrom(const SwapTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.SwapTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SwapTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SwapTable::Swap(SwapTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SwapTable::InternalSwap(SwapTable* other) {
  std::swap(table_a_, other->table_a_);
  std::swap(table_b_, other->table_b_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SwapTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SwapTable_descriptor_;
  metadata.reflection = SwapTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SwapTable

// required int32 table_a = 1;
bool SwapTable::has_table_a() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void SwapTable::set_has_table_a() {
  _has_bits_[0] |= 0x00000001u;
}
void SwapTable::clear_has_table_a() {
  _has_bits_[0] &= ~0x00000001u;
}
void SwapTable::clear_table_a() {
  table_a_ = 0;
  clear_has_table_a();
}
 ::google::protobuf::int32 SwapTable::table_a() const {
  // @@protoc_insertion_point(field_get:dsm.SwapTable.table_a)
  return table_a_;
}
 void SwapTable::set_table_a(::google::protobuf::int32 value) {
  set_has_table_a();
  table_a_ = value;
  // @@protoc_insertion_point(field_set:dsm.SwapTable.table_a)
}

// required int32 table_b = 2;
bool SwapTable::has_table_b() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void SwapTable::set_has_table_b() {
  _has_bits_[0] |= 0x00000002u;
}
void SwapTable::clear_has_table_b() {
  _has_bits_[0] &= ~0x00000002u;
}
void SwapTable::clear_table_b() {
  table_b_ = 0;
  clear_has_table_b();
}
 ::google::protobuf::int32 SwapTable::table_b() const {
  // @@protoc_insertion_point(field_get:dsm.SwapTable.table_b)
  return table_b_;
}
 void SwapTable::set_table_b(::google::protobuf::int32 value) {
  set_has_table_b();
  table_b_ = value;
  // @@protoc_insertion_point(field_set:dsm.SwapTable.table_b)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClearTable::kTableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClearTable::ClearTable()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.ClearTable)
}

void ClearTable::InitAsDefaultInstance() {
}

ClearTable::ClearTable(const ClearTable& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.ClearTable)
}

void ClearTable::SharedCtor() {
  _cached_size_ = 0;
  table_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClearTable::~ClearTable() {
  // @@protoc_insertion_point(destructor:dsm.ClearTable)
  SharedDtor();
}

void ClearTable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClearTable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClearTable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClearTable_descriptor_;
}

const ClearTable& ClearTable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

ClearTable* ClearTable::default_instance_ = NULL;

ClearTable* ClearTable::New(::google::protobuf::Arena* arena) const {
  ClearTable* n = new ClearTable;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClearTable::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.ClearTable)
  table_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool ClearTable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.ClearTable)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 table = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.ClearTable)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.ClearTable)
  return false;
#undef DO_
}

void ClearTable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.ClearTable)
  // required int32 table = 1;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->table(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.ClearTable)
}

::google::protobuf::uint8* ClearTable::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.ClearTable)
  // required int32 table = 1;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->table(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.ClearTable)
  return target;
}

int ClearTable::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.ClearTable)
  int total_size = 0;

  // required int32 table = 1;
  if (has_table()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table());
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClearTable::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.ClearTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const ClearTable* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const ClearTable>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.ClearTable)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.ClearTable)
    MergeFrom(*source);
  }
}

void ClearTable::MergeFrom(const ClearTable& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.ClearTable)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_table()) {
      set_table(from.table());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void ClearTable::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.ClearTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClearTable::CopyFrom(const ClearTable& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.ClearTable)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClearTable::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClearTable::Swap(ClearTable* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClearTable::InternalSwap(ClearTable* other) {
  std::swap(table_, other->table_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ClearTable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClearTable_descriptor_;
  metadata.reflection = ClearTable_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClearTable

// required int32 table = 1;
bool ClearTable::has_table() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void ClearTable::set_has_table() {
  _has_bits_[0] |= 0x00000001u;
}
void ClearTable::clear_has_table() {
  _has_bits_[0] &= ~0x00000001u;
}
void ClearTable::clear_table() {
  table_ = 0;
  clear_has_table();
}
 ::google::protobuf::int32 ClearTable::table() const {
  // @@protoc_insertion_point(field_get:dsm.ClearTable.table)
  return table_;
}
 void ClearTable::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.ClearTable.table)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EnableTrigger::kTriggerIdFieldNumber;
const int EnableTrigger::kTableFieldNumber;
const int EnableTrigger::kEnableFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EnableTrigger::EnableTrigger()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:dsm.EnableTrigger)
}

void EnableTrigger::InitAsDefaultInstance() {
}

EnableTrigger::EnableTrigger(const EnableTrigger& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:dsm.EnableTrigger)
}

void EnableTrigger::SharedCtor() {
  _cached_size_ = 0;
  trigger_id_ = 0;
  table_ = 0;
  enable_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EnableTrigger::~EnableTrigger() {
  // @@protoc_insertion_point(destructor:dsm.EnableTrigger)
  SharedDtor();
}

void EnableTrigger::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EnableTrigger::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EnableTrigger::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EnableTrigger_descriptor_;
}

const EnableTrigger& EnableTrigger::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_worker_2fworker_2eproto();
  return *default_instance_;
}

EnableTrigger* EnableTrigger::default_instance_ = NULL;

EnableTrigger* EnableTrigger::New(::google::protobuf::Arena* arena) const {
  EnableTrigger* n = new EnableTrigger;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EnableTrigger::Clear() {
// @@protoc_insertion_point(message_clear_start:dsm.EnableTrigger)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(EnableTrigger, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<EnableTrigger*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(trigger_id_, enable_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool EnableTrigger::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:dsm.EnableTrigger)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 trigger_id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_id_)));
          set_has_trigger_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_table;
        break;
      }

      // required int32 table = 2;
      case 2: {
        if (tag == 16) {
         parse_table:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &table_)));
          set_has_table();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_enable;
        break;
      }

      // required bool enable = 3;
      case 3: {
        if (tag == 24) {
         parse_enable:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
          set_has_enable();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:dsm.EnableTrigger)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:dsm.EnableTrigger)
  return false;
#undef DO_
}

void EnableTrigger::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:dsm.EnableTrigger)
  // required int32 trigger_id = 1;
  if (has_trigger_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->trigger_id(), output);
  }

  // required int32 table = 2;
  if (has_table()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->table(), output);
  }

  // required bool enable = 3;
  if (has_enable()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->enable(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:dsm.EnableTrigger)
}

::google::protobuf::uint8* EnableTrigger::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:dsm.EnableTrigger)
  // required int32 trigger_id = 1;
  if (has_trigger_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->trigger_id(), target);
  }

  // required int32 table = 2;
  if (has_table()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->table(), target);
  }

  // required bool enable = 3;
  if (has_enable()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->enable(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:dsm.EnableTrigger)
  return target;
}

int EnableTrigger::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:dsm.EnableTrigger)
  int total_size = 0;

  if (has_trigger_id()) {
    // required int32 trigger_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_id());
  }

  if (has_table()) {
    // required int32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table());
  }

  if (has_enable()) {
    // required bool enable = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
int EnableTrigger::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:dsm.EnableTrigger)
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required int32 trigger_id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->trigger_id());

    // required int32 table = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->table());

    // required bool enable = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EnableTrigger::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:dsm.EnableTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const EnableTrigger* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const EnableTrigger>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:dsm.EnableTrigger)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:dsm.EnableTrigger)
    MergeFrom(*source);
  }
}

void EnableTrigger::MergeFrom(const EnableTrigger& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:dsm.EnableTrigger)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_trigger_id()) {
      set_trigger_id(from.trigger_id());
    }
    if (from.has_table()) {
      set_table(from.table());
    }
    if (from.has_enable()) {
      set_enable(from.enable());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void EnableTrigger::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:dsm.EnableTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EnableTrigger::CopyFrom(const EnableTrigger& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:dsm.EnableTrigger)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EnableTrigger::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void EnableTrigger::Swap(EnableTrigger* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EnableTrigger::InternalSwap(EnableTrigger* other) {
  std::swap(trigger_id_, other->trigger_id_);
  std::swap(table_, other->table_);
  std::swap(enable_, other->enable_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EnableTrigger::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EnableTrigger_descriptor_;
  metadata.reflection = EnableTrigger_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EnableTrigger

// required int32 trigger_id = 1;
bool EnableTrigger::has_trigger_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void EnableTrigger::set_has_trigger_id() {
  _has_bits_[0] |= 0x00000001u;
}
void EnableTrigger::clear_has_trigger_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void EnableTrigger::clear_trigger_id() {
  trigger_id_ = 0;
  clear_has_trigger_id();
}
 ::google::protobuf::int32 EnableTrigger::trigger_id() const {
  // @@protoc_insertion_point(field_get:dsm.EnableTrigger.trigger_id)
  return trigger_id_;
}
 void EnableTrigger::set_trigger_id(::google::protobuf::int32 value) {
  set_has_trigger_id();
  trigger_id_ = value;
  // @@protoc_insertion_point(field_set:dsm.EnableTrigger.trigger_id)
}

// required int32 table = 2;
bool EnableTrigger::has_table() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void EnableTrigger::set_has_table() {
  _has_bits_[0] |= 0x00000002u;
}
void EnableTrigger::clear_has_table() {
  _has_bits_[0] &= ~0x00000002u;
}
void EnableTrigger::clear_table() {
  table_ = 0;
  clear_has_table();
}
 ::google::protobuf::int32 EnableTrigger::table() const {
  // @@protoc_insertion_point(field_get:dsm.EnableTrigger.table)
  return table_;
}
 void EnableTrigger::set_table(::google::protobuf::int32 value) {
  set_has_table();
  table_ = value;
  // @@protoc_insertion_point(field_set:dsm.EnableTrigger.table)
}

// required bool enable = 3;
bool EnableTrigger::has_enable() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void EnableTrigger::set_has_enable() {
  _has_bits_[0] |= 0x00000004u;
}
void EnableTrigger::clear_has_enable() {
  _has_bits_[0] &= ~0x00000004u;
}
void EnableTrigger::clear_enable() {
  enable_ = false;
  clear_has_enable();
}
 bool EnableTrigger::enable() const {
  // @@protoc_insertion_point(field_get:dsm.EnableTrigger.enable)
  return enable_;
}
 void EnableTrigger::set_enable(bool value) {
  set_has_enable();
  enable_ = value;
  // @@protoc_insertion_point(field_set:dsm.EnableTrigger.enable)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace dsm

// @@protoc_insertion_point(global_scope)
